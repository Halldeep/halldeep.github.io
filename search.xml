<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[LeetCode的第14题]]></title>
    <url>%2F2019%2F08%2F28%2Falgorithm08%2F</url>
    <content type="text"><![CDATA[给定一个 32 位有符号整数，将整数中的数字进行反转。 示例 1:输入: 123输出: 321示例 2:输入: -123输出: -321示例 3:输入: 120输出: 21注意:假设我们的环境只能存储 32 位有符号整数，其数值范围是 [−231, 231 − 1]。根据这个假设，如果反转后的整数溢出，则返回 0。 解题的整个过程:在这里说一下我在解决这个问题中遇到的问题,首先我找到了这个代码: 123456789101112131415161718192021222324252627282930313233343536373839#include &lt;iostream&gt; using namespace std; class Solution &#123; public: int reverse(int x) &#123; int reverseX=0; int temp; int a; int biaozhi=1; if (x&lt;0)//如果x小于0，将它变成正的 &#123; biaozhi=-1; x=abs(x); &#125; while(x!=0)//当x不等于0的时候 &#123; if (reverseX&gt;(INT_MAX-x%10)/10)//判断是否溢出 &#123; return 0; &#125; else &#123; temp=x%10; reverseX=reverseX*10+temp; x=x/10; &#125; &#125; return reverseX*biaozhi; &#125; &#125;; int main() &#123; Solution s; int i=s.reverse(1534236469); cout&lt;&lt;i&lt;&lt;endl; return 0; &#125; 但是这个代码中 if (reverseX&gt;(INT_MAX-x%10)/10)//判断是否溢出 这一句我并没有理解,为此我思考了很久见如下的代码 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667#include &lt;iostream&gt; using namespace std; class Solution &#123; public: int reverse(int x) &#123; int reverseX=0; int temp; int a; int biaozhi=1; if (x&lt;0)//如果x小于0，将它变成正的 &#123; biaozhi=-1; x=abs(x); &#125; while(x!=0)//当x不等于0的时候 &#123; if (reverseX&gt;(200-x%10)/10)//判断是否溢出 &#123; return 0; &#125; else &#123; temp=x%10; reverseX=reverseX*10+temp; x=x/10; &#125; &#125; return reverseX*biaozhi; &#125; int reverse1(int x) &#123; int reverseX=0; int temp; int a; int biaozhi=1; if (x&lt;0)//如果x小于0，将它变成正的 &#123; biaozhi=-1; x=abs(x); &#125; while(x!=0)//当x不等于0的时候 &#123; if (reverseX&gt;(200)/10)//判断是否溢出 &#123; return 0; &#125; else &#123; temp=x%10; reverseX=reverseX*10+temp; x=x/10; &#125; &#125; return reverseX*biaozhi; &#125; &#125;; int main() &#123; Solution s; for(int i=100;i&lt;=200;i++) &#123; cout&lt;&lt;s.reverse(i)&lt;&lt;" "&lt;&lt;s.reverse1(i)&lt;&lt;endl; &#125; return 0; &#125; 在这里我把所给的范围缩小为200,希望能从中找到不同输出结果如下可以明显看出来,当数值为102时不一样的地方出来了,猜想加上这个x%10,是为了避免个别不符合界限的数字出现将范围改为300时我推算当数值为103,203时应该也是不一样的结果如下:验证了我的想法,虽然这个疑问终究没解决,但我似乎有一点想法了,先记住这个表达式,以后有时间我会深入的研究一番. 给定一个 32 位有符号整数，将整数中的数字进行反转。 示例 1:输入: 123输出: 321示例 2:输入: -123输出: -321示例 3:输入: 120输出: 21注意:假设我们的环境只能存储 32 位有符号整数，其数值范围是 [−231, 231 − 1]。根据这个假设，如果反转后的整数溢出，则返回 0。 解题的整个过程:在这里说一下我在解决这个问题中遇到的问题,首先我找到了这个代码: 123456789101112131415161718192021222324252627282930313233343536373839#include &lt;iostream&gt; using namespace std; class Solution &#123; public: int reverse(int x) &#123; int reverseX=0; int temp; int a; int biaozhi=1; if (x&lt;0)//如果x小于0，将它变成正的 &#123; biaozhi=-1; x=abs(x); &#125; while(x!=0)//当x不等于0的时候 &#123; if (reverseX&gt;(INT_MAX-x%10)/10)//判断是否溢出 &#123; return 0; &#125; else &#123; temp=x%10; reverseX=reverseX*10+temp; x=x/10; &#125; &#125; return reverseX*biaozhi; &#125; &#125;; int main() &#123; Solution s; int i=s.reverse(1534236469); cout&lt;&lt;i&lt;&lt;endl; return 0; &#125; 但是这个代码中 if (reverseX&gt;(INT_MAX-x%10)/10)//判断是否溢出 这一句我并没有理解,为此我思考了很久见如下的代码 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667#include &lt;iostream&gt; using namespace std; class Solution &#123; public: int reverse(int x) &#123; int reverseX=0; int temp; int a; int biaozhi=1; if (x&lt;0)//如果x小于0，将它变成正的 &#123; biaozhi=-1; x=abs(x); &#125; while(x!=0)//当x不等于0的时候 &#123; if (reverseX&gt;(200-x%10)/10)//判断是否溢出 &#123; return 0; &#125; else &#123; temp=x%10; reverseX=reverseX*10+temp; x=x/10; &#125; &#125; return reverseX*biaozhi; &#125; int reverse1(int x) &#123; int reverseX=0; int temp; int a; int biaozhi=1; if (x&lt;0)//如果x小于0，将它变成正的 &#123; biaozhi=-1; x=abs(x); &#125; while(x!=0)//当x不等于0的时候 &#123; if (reverseX&gt;(200)/10)//判断是否溢出 &#123; return 0; &#125; else &#123; temp=x%10; reverseX=reverseX*10+temp; x=x/10; &#125; &#125; return reverseX*biaozhi; &#125; &#125;; int main() &#123; Solution s; for(int i=100;i&lt;=200;i++) &#123; cout&lt;&lt;s.reverse(i)&lt;&lt;" "&lt;&lt;s.reverse1(i)&lt;&lt;endl; &#125; return 0; &#125; 在这里我把所给的范围缩小为200,希望能从中找到不同输出结果如下可以明显看出来,当数值为102时不一样的地方出来了,猜想加上这个x%10,是为了避免个别不符合界限的数字出现将范围改为300时我推算当数值为103,203时应该也是不一样的结果如下:验证了我的想法,虽然这个疑问终究没解决,但我似乎有一点想法了,先记住这个表达式,以后有时间我会深入的研究一番.]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>题目思路</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LeetCode的第7题]]></title>
    <url>%2F2019%2F08%2F28%2Falgorithm07%2F</url>
    <content type="text"><![CDATA[给定一个 32 位有符号整数，将整数中的数字进行反转。 示例 1:输入: 123输出: 321示例 2:输入: -123输出: -321示例 3:输入: 120输出: 21注意:假设我们的环境只能存储 32 位有符号整数，其数值范围是 [−231, 231 − 1]。根据这个假设，如果反转后的整数溢出，则返回 0。 解题的整个过程:在这里说一下我在解决这个问题中遇到的问题,首先我找到了这个代码: 123456789101112131415161718192021222324252627282930313233343536373839#include &lt;iostream&gt; using namespace std; class Solution &#123; public: int reverse(int x) &#123; int reverseX=0; int temp; int a; int biaozhi=1; if (x&lt;0)//如果x小于0，将它变成正的 &#123; biaozhi=-1; x=abs(x); &#125; while(x!=0)//当x不等于0的时候 &#123; if (reverseX&gt;(INT_MAX-x%10)/10)//判断是否溢出 &#123; return 0; &#125; else &#123; temp=x%10; reverseX=reverseX*10+temp; x=x/10; &#125; &#125; return reverseX*biaozhi; &#125; &#125;; int main() &#123; Solution s; int i=s.reverse(1534236469); cout&lt;&lt;i&lt;&lt;endl; return 0; &#125; 但是这个代码中 if (reverseX&gt;(INT_MAX-x%10)/10)//判断是否溢出 这一句我并没有理解,为此我思考了很久见如下的代码 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667#include &lt;iostream&gt; using namespace std; class Solution &#123; public: int reverse(int x) &#123; int reverseX=0; int temp; int a; int biaozhi=1; if (x&lt;0)//如果x小于0，将它变成正的 &#123; biaozhi=-1; x=abs(x); &#125; while(x!=0)//当x不等于0的时候 &#123; if (reverseX&gt;(200-x%10)/10)//判断是否溢出 &#123; return 0; &#125; else &#123; temp=x%10; reverseX=reverseX*10+temp; x=x/10; &#125; &#125; return reverseX*biaozhi; &#125; int reverse1(int x) &#123; int reverseX=0; int temp; int a; int biaozhi=1; if (x&lt;0)//如果x小于0，将它变成正的 &#123; biaozhi=-1; x=abs(x); &#125; while(x!=0)//当x不等于0的时候 &#123; if (reverseX&gt;(200)/10)//判断是否溢出 &#123; return 0; &#125; else &#123; temp=x%10; reverseX=reverseX*10+temp; x=x/10; &#125; &#125; return reverseX*biaozhi; &#125; &#125;; int main() &#123; Solution s; for(int i=100;i&lt;=200;i++) &#123; cout&lt;&lt;s.reverse(i)&lt;&lt;" "&lt;&lt;s.reverse1(i)&lt;&lt;endl; &#125; return 0; &#125; 在这里我把所给的范围缩小为200,希望能从中找到不同输出结果如下可以明显看出来,当数值为102时不一样的地方出来了,猜想加上这个x%10,是为了避免个别不符合界限的数字出现将范围改为300时我推算当数值为103,203时应该也是不一样的结果如下:验证了我的想法,虽然这个疑问终究没解决,但我似乎有一点想法了,先记住这个表达式,以后有时间我会深入的研究一番.]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>题目思路</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[malloc函数的理解补充]]></title>
    <url>%2F2019%2F08%2F28%2Falgorithm06%2F</url>
    <content type="text"><![CDATA[先观察以下代码 123456789101112131415161718192021222324252627#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;typedef struct Node&#123; int data; struct Node* next;&#125;NODE,*PNODE;typedef struct Stack&#123; PNODE pTop; PNODE pBottom;&#125;STACK,*PSTACK;void init(PSTACK);int main(void)&#123; STACK S; PSTACK P; //init(&amp;S); P=&amp;S; printf("%d,%d,%d",P-&gt;pTop,P-&gt;pBottom,P); return 0;&#125;void init(PSTACK Ps)&#123; Ps-&gt;pTop=(PNODE)malloc(sizeof(NODE)); Ps-&gt;pBottom=(PNODE)malloc(sizeof(NODE));&#125; 运行结果如下：取消掉init（&amp;S）的注释运行结果如下：可以看到malloc函数为结构体STACK里面的两个指针变量附上了新的值，也就是这个指针指向了一个真正的结构体变量。再将代码修改成这种格式 12345678910111213141516171819202122232425262728293031#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;typedef struct Node&#123; int data; struct Node* next;&#125;NODE,*PNODE;typedef struct Stack&#123; PNODE pTop; PNODE pBottom;&#125;STACK,*PSTACK;void init(PSTACK);int main(void)&#123; STACK S; PSTACK P; init(&amp;S); P=&amp;S; printf("%d,%d,%d",P-&gt;pTop,P-&gt;pBottom,P); printf("\n"); printf("%d,%d,%d",P-&gt;pTop-&gt;data,P-&gt;pTop-&gt;next,P-&gt;pTop); printf("\n"); printf("%d,%d,%d",P-&gt;pBottom-&gt;data,P-&gt;pBottom-&gt;next,P-&gt;pBottom); return 0;&#125;void init(PSTACK Ps)&#123; Ps-&gt;pTop=(PNODE)malloc(sizeof(NODE)); Ps-&gt;pBottom=(PNODE)malloc(sizeof(NODE));&#125; 输出的结果变成了这样 STACK结构体里面的两个指针指向的结构体变量里面的值是系统自动分配的值如果将init（&amp;S）注释掉也就是说我不去给指针分配指向的结构体变量，那想要通过这个指针去访问指针所指向的值是根本不行的。]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>概念理解</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[malloc函数的理解]]></title>
    <url>%2F2019%2F08%2F28%2Falgorithm05%2F</url>
    <content type="text"><![CDATA[在数据结构里经常会用到malloc函数，但是它的功能我一直都是很模糊的，今天在看数据结构的时候忽然感觉到顿悟，有一些心得和大家分享一下。先分享这样的一段程序. 12345678910111213141516#include&lt;stdio.h&gt;#include&lt;malloc.h&gt;typedef struct Node&#123; int data; struct Node* next;&#125;NODE,*pNode;int main(void)&#123; pNode Pa; pNode Pb=(pNode)malloc(sizeof(NODE)); //printf("%d,%d,%d",Pa,Pa-&gt;data,Pa-&gt;next); printf("\n"); printf("%d,%d,%d",Pb,Pb-&gt;data,Pb-&gt;next); return 0;&#125; 程序的输出结果是这样的如果把第一个printf取消注释的话运行的结果是这样的由此可见malloc函数的作用下面说一下我对这个函数的一点理解malloc函数是为指向结构体的指针指向了堆内存里面的一个结构体变量，而这个结构体里面的值是系统自动分配的值。如果没用使用malloc函数，那么仅仅是开辟了一块栈内存空间，并没用一个可以指的结构体变量，换做Java来思考的话就相当于你并没有实例化对象，malloc就是实例化对象的一个过程。]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>概念理解</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构里简易的栈]]></title>
    <url>%2F2019%2F08%2F28%2Falgorithm04%2F</url>
    <content type="text"><![CDATA[根据所学自己编写了一个栈的结构，正常使用应该是没问题的 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;typedef struct Node&#123; int data; struct Node* next;&#125;NODE,*PNODE;typedef struct Stack&#123; PNODE pTop; PNODE pBottom;&#125;STACK,*PSTACK;void init(PSTACK);void push(PSTACK,int);void travel(PSTACK);bool isEmpty(PSTACK);void pop(PSTACK,int*);int main(void)&#123; int i=0; STACK S; init(&amp;S); travel(&amp;S); push(&amp;S,1); push(&amp;S,2); push(&amp;S,3); push(&amp;S,4); push(&amp;S,5); push(&amp;S,6); push(&amp;S,7); travel(&amp;S); pop(&amp;S,&amp;i); travel(&amp;S); printf("%d",i); return 0;&#125;void init(PSTACK Ps)&#123; Ps-&gt;pTop=(PNODE)malloc(sizeof(NODE)); if(Ps-&gt;pTop==NULL) &#123; printf("内存分配失败"); exit(-1); &#125; else &#123; Ps-&gt;pBottom=Ps-&gt;pTop; Ps-&gt;pTop-&gt;next=NULL; &#125;&#125;void push(PSTACK Ps,int val)&#123; PNODE pNew=(PNODE)malloc(sizeof(NODE)); if(pNew==NULL) &#123; printf("内存分配失败"); exit(-1); &#125; else&#123; pNew-&gt;data=val; pNew-&gt;next=Ps-&gt;pTop; Ps-&gt;pTop=pNew; &#125;&#125;bool isEmpty(PSTACK Ps)&#123; if(Ps-&gt;pTop==Ps-&gt;pBottom) return true; else return false;&#125;void travel(PSTACK Ps)&#123; if(isEmpty(Ps)) return; PNODE q=Ps-&gt;pTop; while(q!=Ps-&gt;pBottom) &#123; printf("%d \n",q-&gt;data); q=q-&gt;next; &#125;&#125;void pop(PSTACK Ps,int* val)&#123; if(isEmpty(Ps)) return; PNODE P=(PNODE)malloc(sizeof(NODE)); P=Ps-&gt;pTop; *val=P-&gt;data; Ps-&gt;pTop=Ps-&gt;pTop-&gt;next; free(P);&#125;]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>基本数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构里循环队列]]></title>
    <url>%2F2019%2F08%2F28%2Falgorithm03%2F</url>
    <content type="text"><![CDATA[12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;#include&lt;malloc.h&gt;#define MAX 10typedef struct Queue&#123; int* pBase;//可以看作数组 int front; int rear;&#125;QUEUE;void init(QUEUE*);bool enQueue(QUEUE*,int);void travel_queue(QUEUE*);bool full_queue(QUEUE*);int main(void)&#123; QUEUE Q; init(&amp;Q); enQueue(&amp;Q,1); enQueue(&amp;Q,2); enQueue(&amp;Q,3); enQueue(&amp;Q,4); enQueue(&amp;Q,5); enQueue(&amp;Q,6); travel_queue(&amp;Q); return 0;&#125;void init(QUEUE *pQ)&#123; pQ-&gt;pBase=(int *)malloc(sizeof(int )*MAX);//开辟队列且定义长度，长度是MAX pQ-&gt;front=0; pQ-&gt;rear=0;&#125;bool full_queue(QUEUE* pQ)&#123; if((pQ-&gt;rear+1)%MAX==pQ-&gt;front) return true; else return false;&#125;bool enQueue(QUEUE* pQ,int val)&#123; if(full_queue(pQ)) &#123; return false; &#125; else &#123; pQ-&gt;pBase[pQ-&gt;rear]=val; pQ-&gt;rear=(pQ-&gt;rear+1)%MAX; return true; &#125;&#125;void travel_queue(QUEUE* pQ)&#123; int i=0; i=pQ-&gt;front; while(i!=pQ-&gt;rear) &#123; printf("%d \n",pQ-&gt;pBase[i]); i=(i+1)%MAX; &#125; return;&#125;]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>基本数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[递归函数的理解]]></title>
    <url>%2F2019%2F08%2F28%2Falgorithm01%2F</url>
    <content type="text"><![CDATA[当一个函数的运行期间调用另一个函数的时候，在运行被调用的函数之前，系统会怎样操作呢：1． 将所有的实参，以及接下来会用到实参的语句的地址等信息传递给被调用的函数保存2． 为被调用的函数的局部变量（还有被调函数里的变量）分配存储空间3． 将控制转移到被调用函数的入口而被调函数结束返回主调函数的之前，系统也是需要做以下的事情：1． 上一步分配的储存空间全部free掉，但是要保存被调函数的返回结果2． 依照开始保存的返回地址将控制转移给调用函数。而在多次调用的时候，按照”后调用先返回”的原则。 也就是说，先把调用的函数拿过来，按照栈的形式进行存储然后再进行操作，例如下面代码： 12345678910111213141516171819202122232425#include&lt;stdio.h&gt;void A();void B();void C();void A()&#123; B();&#125;void B()&#123; C();&#125;void C()&#123; printf("C");&#125;int main(void)&#123; A(); return 0;&#125; 这是一个压栈的过程！在主函数调用A函数的时候，栈顶里存放的就是A函数里的数据，然后A函数又去调用B函数，B函数里的数据就被压进栈中，然后是C函数。当C函数执行完操作的时候，就释放掉其存储空间，然后是B，以此类推，当前运行的函数永远在栈顶。 而递归就是函数自己去调用自己，流程是和上面的一样的，如果懂了上面的操作，那么递归是很容易去理解的。而且在一个函数调用另一个函数的时候，该函数不会继续执行]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>概念理解</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于链表一些有趣的东西]]></title>
    <url>%2F2019%2F08%2F28%2Falgorithm00%2F</url>
    <content type="text"><![CDATA[今天刷题的时候遇见了这个问题 题目出自leetcode 21：合并两个有序链表 将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。示例：输入：1-&gt;2-&gt;4, 1-&gt;3-&gt;4输出：1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4 我想正好可以借这个机会复习一下数据结构的链表的结构，感觉忘的差不多了。。。首先我写出了一个简易的链表代码如下 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;#include&lt;malloc.h&gt;typedef struct Node&#123; int data; struct Node* next;&#125;NODE,*pNode;pNode CreatList()&#123; pNode Ps=(pNode)malloc(sizeof(NODE)); Ps-&gt;data = -1; Ps-&gt;next = NULL; return Ps;&#125;void add(pNode Ps,int val)&#123; pNode pNew=(pNode)malloc(sizeof(NODE)); if(pNew==NULL) &#123; printf("内存分配失败"); exit(-1); &#125; if(Ps-&gt;next == NULL) &#123; pNew-&gt;data = val; Ps-&gt;next = pNew; pNew-&gt;next = NULL; &#125; else &#123; pNode P = Ps; while(P-&gt;next!=NULL) &#123; P=P-&gt;next; &#125; pNew-&gt;data = val; P-&gt;next = pNew; pNew-&gt;next = NULL; &#125; free(p);&#125;void ListPrint(pNode Ps)&#123; pNode P = Ps-&gt;next; while(P!=NULL) &#123; printf("%d\n",P-&gt;data); P=P-&gt;next; &#125;&#125;int main()&#123; pNode Pa; Pa = CreatList(); add(Pa,1); add(Pa,1); add(Pa,1); add(Pa,1); add(Pa,1); ListPrint(Pa); return 0;&#125; 不过在运行的时候我发现，不是我期望的那个结果，没有任何的显示，仔细的检查代码之后，我发现在add函数里的最后我加了一句free(P)，我尝试这将它删掉，程序正常的运行了，结果如下：不过我觉得这是很有意思的事情，我查找了些关于free函数的资料： void free(void *FirstByte)： 该函数是将之前用malloc分配的空间还给程序或者是操作系统，也就是释放了这块内存，让它重新得到自由。 好像并没有解决我的疑问，我又找到了这个 free()释放的是指针指向的内存！注意！释放的是内存，不是指针！指针并没有被释放，指针仍然指向原来的存储空间。指针是一个变量，只有程序结束时才被销毁。释放了内存空间后，原来指向这块空间的指针还是存在！只不过现在指针指向的内容的垃圾，是未定义的，所以说是垃圾。因此，释放内存后把指针指向NULL，防止指针在后面不小心又被解引用了。 也就是说我在free(P)这一句中，我把P指向的内存空间给释放了，所以程序无法继续的运行。。。]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>题目思路</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[二叉树的应用—平衡二叉树]]></title>
    <url>%2F2019%2F08%2F27%2Fdatastructure05%2F</url>
    <content type="text"><![CDATA[平衡二叉树：AVL，在任意结点的平衡因子的绝对值不超过一。平衡因子：左子树高度减去右子树高度 计算高度为h的最小平衡二叉树的节点数Nh 平衡二叉树的判断代码如下 1234567891011121314151617181920212223242526void Judge_AVL(BiTree bt,int &amp;Balance,int &amp;h)&#123; //使用引用类型是因为要修改值的原因 int bl=0,br=0,hl=0,hr=0; if (bt == NULL)&#123; h = 0; Balance = 1; &#125; else if (bt-&gt;lchild == NULL&amp;&amp;bt-&gt;rchild == NULL)&#123; h = 1; Balance = 1; &#125; else&#123; Judge_AVL(bt-&gt;lchild,bl,hl); Judge_AVL(bt-&gt;rchild,br,hr); if (hl &gt; hr)&#123;//判断那个高，选哪个做整个树的高度 h = hl+1; &#125;else&#123; h = hr+1; &#125; if (abs(hr-hl) &lt; 2&amp;&amp;bl = 1&amp;&amp;br = 1)&#123; //根结点平衡，以及左右子树均平衡 Balance = 1; &#125;else Balance = 0; &#125;&#125; 平衡二叉树的插入基本的思想是先插入，后调整，注意每次调整一定要是最小不平衡子树方可 图解很好理解，多看几遍就好* 方法1 LL平衡旋转（右单旋转）在结点A的左孩子的左子树上插入新节点（左子树的左右结点都可以，不受影响）让B结点上去，B的右结点更改为A，B真正的有节点改为A的左结点，因为B本身是A的左结点 方法2 RR平衡旋转（左单旋转）在结点A的右孩子的右子树上插入新节点（右子树的左右结点都可以，不受影响） 跟右旋一致，可以先变化为方法1的树，操作结束后再变换为原树。 方法3 LR平衡旋转（先左后右双旋转）在结点A的左孩子的右子树插入了新的结点 方法4 RL平衡旋转（先右后左双旋转）在在结点A的右孩子的左子树插入了新的结点]]></content>
      <categories>
        <category>874复习</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[树的应用—二叉排序树]]></title>
    <url>%2F2019%2F08%2F26%2Fdatastructure04%2F</url>
    <content type="text"><![CDATA[二叉排序树可以为空树，也可以为非空树，为非空树时有以下特点 若左子树非空，则左子树上所有结点值均小于根结点的值 若右子树非空，则右子树上所有结点值均大于根结点的值 注意这里没有等于，也就是说二叉排序树中默认是没有相同值结点的* 左，右子树本身也是一颗二叉排序树 二叉排序树进行中序遍历后，序列即为一个递增的有序序列 查找操作二叉树非空时，查找根结点，若相等则查找成功；若不等，则小于根结点查左子树，大于查右子树当查找到叶子结点还未找到，查找失败代码实现，看懂就行插入操作若二叉排序树为空时，直接插入结点若二叉排序树非空时，值小于根结点值时，插入左子树；大于插入右子树，等于不能插入。（使用递归来实现） 1234567891011121314151617int BST_Insert(BiTree &amp;T,KeyType k)&#123; if (T == NULL)&#123; T = (BiTree)malloc(sizeof(BSTNode)); T-&gt;key = k; T-&gt;lchild = T-&gt;rchild = NULL; return 1; &#125; else if (k == T-&gt;key)&#123; return 0; &#125; else if (k &lt; T-key)&#123; return BSTNode(T-&gt;lchild,k); &#125; else if (k &gt; T-key)&#123; return BSTNode(T-&gt;rchild,k); &#125;&#125; 构造二叉排序树构造的过程是一个动态的过程，不断的调用插入函数来进行构造读入一个元素并建立结点，若二叉树为空将其作为根结点；若二叉排序树非空，小于插左子树，大于插右子树。 123456789void Create_BST(BiTree &amp;T,keyType str[],int n)&#123;//str存放插入的元素，n为插入的个数 T = NULL; int i = 0; while(i&lt;n)&#123; BST_Insert(T,str[i]); i++; &#125;&#125; 删除 若删除结点为叶子结点，则直接删除 若删除结点z有一颗子树y，那么选取这棵子树y代替该结点z的位置 若删除结点z有两颗子树，直接让z的中序遍历直接后继x，直接代替z的位置，然后执行删除x的操作，以此类推。最终会变成上面的两种情况。 删除一个结点，然后再插入该结点，所得到的二叉排序树可能会不一样]]></content>
      <categories>
        <category>874复习</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[树的应用—并查集]]></title>
    <url>%2F2019%2F08%2F26%2Fdatastructure03%2F</url>
    <content type="text"><![CDATA[并查集是一种简单的集合表示使用树的双亲表示法作为并查集的存储结构，通常使用数组元素的下标代表元素名，用根结点的下标代表子集合名，根结点的双亲结点为负数 操作如下 将集合中的所有元素初始化为只有一个单元素的子集合当集合变为一下情况时，存储结构变化如下 0的树上共有四个元素，所以0位置的双亲值为4，因为是根结点，值为-4。3的双亲结点为2，所以双亲值为2。剩余元素以此类推 代码实现并查集的操作这里的S数组存储的是并查集里双亲结点的下标 1234567891011121314151617181920#define SIZE 100int UFset[SIZE]void Initial(int S[])&#123; for (int i = 0; i &lt; size; ++i) &#123; S[i] = -1; &#125;&#125;int Find(int S[],int x)&#123;//要找出的是x元素所在树的根结点，因为根结点双亲值为负 while(S[x]&gt;=0) x = S[x]; return x;&#125;void Union(int S[],int Root1,int Root2)&#123;//合并就是把Roo2子集变为Root1的子集 S[Root2] = Root1;&#125; 合并操作图解]]></content>
      <categories>
        <category>874复习</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[树和森林的遍历]]></title>
    <url>%2F2019%2F08%2F26%2Fdatastructure02%2F</url>
    <content type="text"><![CDATA[树的遍历 先根遍历若树非空，则先访问根结点，再按从左到右的顺序遍历根结点的每棵子树 先根遍历：RADEBCFGHK将其转化为二叉树之后，先序遍历：RADEBCFGHK 树的先根遍历序列与这棵树对应二叉树的先序遍历序列相同* 后根遍历若树非空，则先按从左到右的顺序遍历根结点的每颗子树，再访问根结点后根遍历序列：DEABGHKFCR将其转化为二叉树之后，中序遍历：DEABGHKFCR 树的后根遍历序列与这棵树对应二叉树的中序遍历序列相同* 这里没有中根遍历是因为树并不是像二叉树一样分为左右子树，无法中根遍历* 层次遍历按照标号的顺序，由上至下，由左至右的顺序，一层一层遍历 森林的遍历 先序遍历 等同于将森林转化为二叉树之后的先序遍历* 中序遍历 等同于将森林转化为二叉树之后的中序遍历*内容过于简单，不再多余赘述了]]></content>
      <categories>
        <category>874复习</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[森林，树，二叉树转化]]></title>
    <url>%2F2019%2F08%2F26%2Fdatastructure01%2F</url>
    <content type="text"><![CDATA[树与二叉树之间的转换依靠的原则是左孩子，右兄弟的原则每个结点左指针指向第一个孩子结点，右指针指向树中的相邻结点 森林与二叉树之间的转换也是同样的道理，只不过根结点的相邻结点即为相邻树的根结点]]></content>
      <categories>
        <category>874复习</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[中序遍历建立线索二叉树]]></title>
    <url>%2F2019%2F08%2F24%2Fdatastructure00%2F</url>
    <content type="text"><![CDATA[为什么使用中序遍历来建立线索二叉树？ 因为中序遍历方便寻找前驱节点和后继节点，而先序遍历不方便找后继节点，后序遍历不方便找前驱节点和后继节点。 中序遍历线索二叉树的特点这里需要理解一下指针不为线索时的情况（中序遍历） 建立代码 12345678910111213141516void InThread(ThreadTree &amp;p,ThreadTree &amp;pre)&#123; if(p!=NULL)&#123; InThread(p-&gt;lchild,pre); if (p-&gt;lchild==NULL)&#123; p-&gt;lchild = pre; p-&gt;tap=1; &#125; if (pre!=NULL &amp;&amp; p-&gt;rchild==NULL)&#123; pre-&gt;rchild = p; pre-&gt;rtag = 1; &#125; pre = p; InThread(p-&gt;rchild,pre); &#125;&#125; 理解不来，背下即可，与中序遍历相似。只不过在递归中加入了线索化的过程。]]></content>
      <categories>
        <category>874复习</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
</search>
