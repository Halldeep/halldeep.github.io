<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[图—应用（最短路径）]]></title>
    <url>%2F2019%2F09%2F03%2Fdatastructure15%2F</url>
    <content type="text"><![CDATA[最短路径：两个顶点之间带权路径长度最短的路径为最短路径寻找图中的最短路径方法 Dijksta：带权图单源最短路径（一个顶点为源点，到其他各个顶点的最短路径）实例描述 dist数组存放的是第一个顶点0，到其他顶点之间的连线的权值，如果不存在则为无穷 s数组表示的是计算完成的顶点，这里0计算完成，对应数组值置为1 path数组表示的是0这个顶点能达到的顶点，将其置为0点的数组下标0 dist数组：其中除去0点值，最小值为3，所以把顶点2加入到已经计算完成的顶点集中，顶点2可以达到的顶点为4，0-&gt;2-&gt;4=7，小于0-&gt;4=8，所以4对应的下标更改为7。 s数组：将顶点2对应的位置赋值为1，表示顶点2计算完成 path：将顶点4对应的下标赋值为2，因为是从顶点2到达的顶点4]]></content>
      <categories>
        <category>874数据结构复习</category>
      </categories>
      <tags>
        <tag>图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[图—应用（最小生成树）]]></title>
    <url>%2F2019%2F09%2F03%2Fdatastructure14%2F</url>
    <content type="text"><![CDATA[最小生成树 生成树：在连通图之中包含全部顶点的极小连通子图（也就是包含全部顶点，且边最少的子图）（子图即是图中顶点属于原图顶点集的子集，边属于原图边集的子集） 最小生成树*：对于带权的无向连通图G，G的所有生成树之中边的权值之和最小的生成树，称之为最小生成树（MST） 最小生成树的性质 最小生成树不一定唯一，当出现1：无向连通图G的各边值不唯一2：G只有顶点数-1条边的时候 最小生成树是唯一的* 最小生成树的权值是唯一的，且是最小的 最小生成树的边数为顶点-1 生成最小生成树的算法1：Prim直接上例子min_weight数组存放的是顶点A到达其他顶点的权值，当没有连线时，距离设置为无穷，adjvex数组存放的是生成树的连接顺序，这里默认都为0 min_weight数组里C对应的位置改为0，因为C也可以到达B点，且距离比A-B更短，B对应的值更改为C-B的值，C可以到达D，D对应的值更改为C-D。 adjvex数组因为C连接到了A，C对应的值更改为A对应的下标，因为A的下标为0，与初始值相同，故没看出变化。 总结：Prim算法的时间复杂度为O（|V^2|）,与边的数量无关，故该算法适用于边稠密的图 2：Kruskal使用的时候需要两个辅助的方法 堆排序 并查集 直接使用例子选定值最小的边AC，将C与A连接，对应并查集里C的顶点值置为A所对应的数组下标。 下一条边AB如果加入到生成树中，会产生回路，这里并查集的作用就体现了，如果要加入的边对应两个顶点在并查集里的根节点相同，那么就会产生回路，不能加入这条边。 总结：Kruskal算法的时间复杂度O（|E|log|E|），与顶点无关，更适用于稠密图]]></content>
      <categories>
        <category>874数据结构复习</category>
      </categories>
      <tags>
        <tag>图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[图—遍历（深度优先搜索）]]></title>
    <url>%2F2019%2F09%2F03%2Fdatastructure13%2F</url>
    <content type="text"><![CDATA[深度优先搜索类似于树的先序遍历，其遵循的策略是尽可能深地去搜索一个图。同样也会用到辅助数组，该结构使用栈来进行操作。没啥可写的，遇见题再过来补充吧]]></content>
      <categories>
        <category>874数据结构复习</category>
      </categories>
      <tags>
        <tag>图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[图—遍历（广度优先搜索）]]></title>
    <url>%2F2019%2F09%2F03%2Fdatastructure12%2F</url>
    <content type="text"><![CDATA[广度优先搜索 首先访问起始点v 接着由出发点一次访问v的每一个未访问的邻接顶点 w1,w2…wi 然后依次访问w1,w2…wi的每一个未访问的邻接顶点 以此类推 实现的方法是使用队列+辅助数组，辅助数组的使用是为了避免重复访问同一个顶点，造成不必要的开销该算法的空间复杂度是O（v），时间复杂度分为两种 邻接矩阵表示法：O（v^2） 邻接表表示法：O（v+e） e为边的数量，v为顶点的数量*]]></content>
      <categories>
        <category>874数据结构复习</category>
      </categories>
      <tags>
        <tag>图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[图—存储及操作（邻接多重表）]]></title>
    <url>%2F2019%2F09%2F03%2Fdatastructure11%2F</url>
    <content type="text"><![CDATA[无向图的一种链式存储结构 邻接表的缺点是：如果删除一条边，需要遍历整个表，找到对应的两个边表结点进行删除。操作效率较低。在这里的边表中，既要保存第一个顶点的相关信息，也要保存第二个顶点的相关信息。顶点表 data：存储此顶点的数据； firstedge：指针域，用于指向同该顶点有直接关联的存储其他顶点的节点。 边表 ivex 和 jvex：数据域，分别存储图中各边两端的顶点所在数组中的位置下标； ilink：指针域，指向下一个存储与 ivex 有直接关联顶点的节点； jlink：指针域，指向下一个存储与 jvex 有直接关联顶点的节点； info：指针域，用于存储与该顶点有关的其他信息，比如无向网中各边的权； mark：标志域，用于标记此节点是否被操作过，例如在对图中顶点做遍历操作时，为了防止多次操作同一节点，mark 域为 0 表示还未被遍历；mark 为 1 表示该节点已被遍历；]]></content>
      <categories>
        <category>874数据结构复习</category>
      </categories>
      <tags>
        <tag>图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[图—存储及操作（十字链表法）]]></title>
    <url>%2F2019%2F09%2F03%2Fdatastructure10%2F</url>
    <content type="text"><![CDATA[十字链表法是一种针对有向图的链式存储结构在邻接表法里，找到顶点的出边是很容易的，但是找到顶点的入边却要遍历整个所有顶点的边表，很复杂。但是十字链表里，寻找顶点的出边和入边都很容易 顶点表的区域分别为：入边表中第一个结点(那条边是指向该顶点的)出边表中第一个结点(那条边是由该顶点出发的) 边表的区域分别为：弧起点在顶点的下标，弧终点在顶点表中的下标， 终点*相同的一下条边 起点*相同的下一条边如果是网，还可以再增加一个weight域来存储权值。]]></content>
      <categories>
        <category>874数据结构复习</category>
      </categories>
      <tags>
        <tag>图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[图—存储及操作（邻接表法）]]></title>
    <url>%2F2019%2F09%2F03%2Fdatastructure09%2F</url>
    <content type="text"><![CDATA[对于边稀少的图（稀疏图）使用邻接矩阵法会产生大量空间浪费 邻接表法同样分为两个表：顶点表（采用顺序存储），边表（采用链式存储）邻接表法的特点 若G为无向图，存储空间为：边+二倍顶点 若G为无向图，存储空间为：边+顶点 邻接表更适合应用于稀疏图 若G为无向图，则结点的度为该结点边表的长度 若G为有向图，则结点的出度为该结点边表的长度，入度则需要遍历这个边表 邻接表不唯一]]></content>
      <categories>
        <category>874数据结构复习</category>
      </categories>
      <tags>
        <tag>图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[图—存储及操作（邻接矩阵法）]]></title>
    <url>%2F2019%2F09%2F03%2Fdatastructure08%2F</url>
    <content type="text"><![CDATA[邻接矩阵就是把一个图的点集和边集，通过一二维矩阵的方式存储 邻接矩阵存储边的关系是，存在该边则值为1，不存在则值为0有权重的图（网）的存放方法：存在边在矩阵里存放的值即为权值，不存在边则在矩阵存放0/无穷邻接矩阵法的性质 适用于稠密图，因为无论边是否存在，我们都为其申请存储空间 无向图的邻接矩阵为对称矩阵 无向图中第i行（或第i列）带权值元素的个数，为第i个顶点的度 有向图中第i行（第i列）带权值元素的个数，为第i个顶点的出度（入度） ###图G的邻接矩阵为A，A的n次方的含义是？A^n[i][j]表示的是从顶点Vi到顶点Vj长度为n的路径条数]]></content>
      <categories>
        <category>874数据结构复习</category>
      </categories>
      <tags>
        <tag>图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[图的基本概念2]]></title>
    <url>%2F2019%2F09%2F03%2Fdatastructure07%2F</url>
    <content type="text"><![CDATA[连通（无向图）与强连通（有向图） 连通图（无向图）与强连通图（有向图） 常考考点：n个顶点的连通图(强连通图)最少有多少条边连通分量与强连通分量：这里一定要搞明白左边的图为原图，右边的四个为连通子图，我们要找的是连通分量=&gt;极大连通子图。在这里很清楚的看到圈出来的两个图，没有更大的连通子图，把它们包含起来。所以圈出来的就是极大连通子图右边的四个图为强连通图的强连通子图，圈出来的即为强连通分量=&gt;极大强连通子图结论： 如果原图是一个连通图或者强连通图，那么它的连通分量或者强连通分量都是与原图一样的。 如果原图不是一个连通图或者强连通图，那么它的连通分量或者强连通分量会有许多个 极小连通子图生成树这里注意一点，生成树是包含多有顶点的一个极小连通子图，而且是不唯一的。n个顶点图的生成树有n-1条边 生成森林连通图只能生成树，非连通图则可以生成森林 顶点的度以该顶点为一个端点的边的数目 无向图中顶点的度就是连接该顶点的边数 有向图中顶点的度=出度+入度 网即每个边都有一个权值 稠密图和稀疏图 有向树有向树跟树的区别是：有向树是图若为树结构：第二层左边第一个结点的度为2若为有向树结构：第二层左边第一个结点的度为3]]></content>
      <categories>
        <category>874数据结构复习</category>
      </categories>
      <tags>
        <tag>图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[图的基本概念1]]></title>
    <url>%2F2019%2F09%2F03%2Fdatastructure06%2F</url>
    <content type="text"><![CDATA[图是由顶点和边构成，定义如下 线性表，树可以为空，但是图不能为空 图的分类注意第二个图A-&gt;B!=B-&gt;A因为它是有方向的，所以属于简单图 完全图 子图]]></content>
      <categories>
        <category>874数据结构复习</category>
      </categories>
      <tags>
        <tag>图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LeetCode的第14题]]></title>
    <url>%2F2019%2F08%2F28%2Falgorithm08%2F</url>
    <content type="text"><![CDATA[给定一个 32 位有符号整数，将整数中的数字进行反转。 示例 1:输入: 123输出: 321示例 2:输入: -123输出: -321示例 3:输入: 120输出: 21注意:假设我们的环境只能存储 32 位有符号整数，其数值范围是 [−231, 231 − 1]。根据这个假设，如果反转后的整数溢出，则返回 0。 解题的整个过程:在这里说一下我在解决这个问题中遇到的问题,首先我找到了这个代码: 123456789101112131415161718192021222324252627282930313233343536373839#include &lt;iostream&gt; using namespace std; class Solution &#123; public: int reverse(int x) &#123; int reverseX=0; int temp; int a; int biaozhi=1; if (x&lt;0)//如果x小于0，将它变成正的 &#123; biaozhi=-1; x=abs(x); &#125; while(x!=0)//当x不等于0的时候 &#123; if (reverseX&gt;(INT_MAX-x%10)/10)//判断是否溢出 &#123; return 0; &#125; else &#123; temp=x%10; reverseX=reverseX*10+temp; x=x/10; &#125; &#125; return reverseX*biaozhi; &#125; &#125;; int main() &#123; Solution s; int i=s.reverse(1534236469); cout&lt;&lt;i&lt;&lt;endl; return 0; &#125; 但是这个代码中 if (reverseX&gt;(INT_MAX-x%10)/10)//判断是否溢出 这一句我并没有理解,为此我思考了很久见如下的代码 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667#include &lt;iostream&gt; using namespace std; class Solution &#123; public: int reverse(int x) &#123; int reverseX=0; int temp; int a; int biaozhi=1; if (x&lt;0)//如果x小于0，将它变成正的 &#123; biaozhi=-1; x=abs(x); &#125; while(x!=0)//当x不等于0的时候 &#123; if (reverseX&gt;(200-x%10)/10)//判断是否溢出 &#123; return 0; &#125; else &#123; temp=x%10; reverseX=reverseX*10+temp; x=x/10; &#125; &#125; return reverseX*biaozhi; &#125; int reverse1(int x) &#123; int reverseX=0; int temp; int a; int biaozhi=1; if (x&lt;0)//如果x小于0，将它变成正的 &#123; biaozhi=-1; x=abs(x); &#125; while(x!=0)//当x不等于0的时候 &#123; if (reverseX&gt;(200)/10)//判断是否溢出 &#123; return 0; &#125; else &#123; temp=x%10; reverseX=reverseX*10+temp; x=x/10; &#125; &#125; return reverseX*biaozhi; &#125; &#125;; int main() &#123; Solution s; for(int i=100;i&lt;=200;i++) &#123; cout&lt;&lt;s.reverse(i)&lt;&lt;" "&lt;&lt;s.reverse1(i)&lt;&lt;endl; &#125; return 0; &#125; 在这里我把所给的范围缩小为200,希望能从中找到不同输出结果如下可以明显看出来,当数值为102时不一样的地方出来了,猜想加上这个x%10,是为了避免个别不符合界限的数字出现将范围改为300时我推算当数值为103,203时应该也是不一样的结果如下:验证了我的想法,虽然这个疑问终究没解决,但我似乎有一点想法了,先记住这个表达式,以后有时间我会深入的研究一番. 给定一个 32 位有符号整数，将整数中的数字进行反转。 示例 1:输入: 123输出: 321示例 2:输入: -123输出: -321示例 3:输入: 120输出: 21注意:假设我们的环境只能存储 32 位有符号整数，其数值范围是 [−231, 231 − 1]。根据这个假设，如果反转后的整数溢出，则返回 0。 解题的整个过程:在这里说一下我在解决这个问题中遇到的问题,首先我找到了这个代码: 123456789101112131415161718192021222324252627282930313233343536373839#include &lt;iostream&gt; using namespace std; class Solution &#123; public: int reverse(int x) &#123; int reverseX=0; int temp; int a; int biaozhi=1; if (x&lt;0)//如果x小于0，将它变成正的 &#123; biaozhi=-1; x=abs(x); &#125; while(x!=0)//当x不等于0的时候 &#123; if (reverseX&gt;(INT_MAX-x%10)/10)//判断是否溢出 &#123; return 0; &#125; else &#123; temp=x%10; reverseX=reverseX*10+temp; x=x/10; &#125; &#125; return reverseX*biaozhi; &#125; &#125;; int main() &#123; Solution s; int i=s.reverse(1534236469); cout&lt;&lt;i&lt;&lt;endl; return 0; &#125; 但是这个代码中 if (reverseX&gt;(INT_MAX-x%10)/10)//判断是否溢出 这一句我并没有理解,为此我思考了很久见如下的代码 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667#include &lt;iostream&gt; using namespace std; class Solution &#123; public: int reverse(int x) &#123; int reverseX=0; int temp; int a; int biaozhi=1; if (x&lt;0)//如果x小于0，将它变成正的 &#123; biaozhi=-1; x=abs(x); &#125; while(x!=0)//当x不等于0的时候 &#123; if (reverseX&gt;(200-x%10)/10)//判断是否溢出 &#123; return 0; &#125; else &#123; temp=x%10; reverseX=reverseX*10+temp; x=x/10; &#125; &#125; return reverseX*biaozhi; &#125; int reverse1(int x) &#123; int reverseX=0; int temp; int a; int biaozhi=1; if (x&lt;0)//如果x小于0，将它变成正的 &#123; biaozhi=-1; x=abs(x); &#125; while(x!=0)//当x不等于0的时候 &#123; if (reverseX&gt;(200)/10)//判断是否溢出 &#123; return 0; &#125; else &#123; temp=x%10; reverseX=reverseX*10+temp; x=x/10; &#125; &#125; return reverseX*biaozhi; &#125; &#125;; int main() &#123; Solution s; for(int i=100;i&lt;=200;i++) &#123; cout&lt;&lt;s.reverse(i)&lt;&lt;" "&lt;&lt;s.reverse1(i)&lt;&lt;endl; &#125; return 0; &#125; 在这里我把所给的范围缩小为200,希望能从中找到不同输出结果如下可以明显看出来,当数值为102时不一样的地方出来了,猜想加上这个x%10,是为了避免个别不符合界限的数字出现将范围改为300时我推算当数值为103,203时应该也是不一样的结果如下:验证了我的想法,虽然这个疑问终究没解决,但我似乎有一点想法了,先记住这个表达式,以后有时间我会深入的研究一番.]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>题目思路</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LeetCode的第7题]]></title>
    <url>%2F2019%2F08%2F28%2Falgorithm07%2F</url>
    <content type="text"><![CDATA[给定一个 32 位有符号整数，将整数中的数字进行反转。 示例 1:输入: 123输出: 321示例 2:输入: -123输出: -321示例 3:输入: 120输出: 21注意:假设我们的环境只能存储 32 位有符号整数，其数值范围是 [−231, 231 − 1]。根据这个假设，如果反转后的整数溢出，则返回 0。 解题的整个过程:在这里说一下我在解决这个问题中遇到的问题,首先我找到了这个代码: 123456789101112131415161718192021222324252627282930313233343536373839#include &lt;iostream&gt; using namespace std; class Solution &#123; public: int reverse(int x) &#123; int reverseX=0; int temp; int a; int biaozhi=1; if (x&lt;0)//如果x小于0，将它变成正的 &#123; biaozhi=-1; x=abs(x); &#125; while(x!=0)//当x不等于0的时候 &#123; if (reverseX&gt;(INT_MAX-x%10)/10)//判断是否溢出 &#123; return 0; &#125; else &#123; temp=x%10; reverseX=reverseX*10+temp; x=x/10; &#125; &#125; return reverseX*biaozhi; &#125; &#125;; int main() &#123; Solution s; int i=s.reverse(1534236469); cout&lt;&lt;i&lt;&lt;endl; return 0; &#125; 但是这个代码中 if (reverseX&gt;(INT_MAX-x%10)/10)//判断是否溢出 这一句我并没有理解,为此我思考了很久见如下的代码 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667#include &lt;iostream&gt; using namespace std; class Solution &#123; public: int reverse(int x) &#123; int reverseX=0; int temp; int a; int biaozhi=1; if (x&lt;0)//如果x小于0，将它变成正的 &#123; biaozhi=-1; x=abs(x); &#125; while(x!=0)//当x不等于0的时候 &#123; if (reverseX&gt;(200-x%10)/10)//判断是否溢出 &#123; return 0; &#125; else &#123; temp=x%10; reverseX=reverseX*10+temp; x=x/10; &#125; &#125; return reverseX*biaozhi; &#125; int reverse1(int x) &#123; int reverseX=0; int temp; int a; int biaozhi=1; if (x&lt;0)//如果x小于0，将它变成正的 &#123; biaozhi=-1; x=abs(x); &#125; while(x!=0)//当x不等于0的时候 &#123; if (reverseX&gt;(200)/10)//判断是否溢出 &#123; return 0; &#125; else &#123; temp=x%10; reverseX=reverseX*10+temp; x=x/10; &#125; &#125; return reverseX*biaozhi; &#125; &#125;; int main() &#123; Solution s; for(int i=100;i&lt;=200;i++) &#123; cout&lt;&lt;s.reverse(i)&lt;&lt;" "&lt;&lt;s.reverse1(i)&lt;&lt;endl; &#125; return 0; &#125; 在这里我把所给的范围缩小为200,希望能从中找到不同输出结果如下可以明显看出来,当数值为102时不一样的地方出来了,猜想加上这个x%10,是为了避免个别不符合界限的数字出现将范围改为300时我推算当数值为103,203时应该也是不一样的结果如下:验证了我的想法,虽然这个疑问终究没解决,但我似乎有一点想法了,先记住这个表达式,以后有时间我会深入的研究一番.]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>题目思路</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[malloc函数的理解补充]]></title>
    <url>%2F2019%2F08%2F28%2Falgorithm06%2F</url>
    <content type="text"><![CDATA[先观察以下代码 123456789101112131415161718192021222324252627#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;typedef struct Node&#123; int data; struct Node* next;&#125;NODE,*PNODE;typedef struct Stack&#123; PNODE pTop; PNODE pBottom;&#125;STACK,*PSTACK;void init(PSTACK);int main(void)&#123; STACK S; PSTACK P; //init(&amp;S); P=&amp;S; printf("%d,%d,%d",P-&gt;pTop,P-&gt;pBottom,P); return 0;&#125;void init(PSTACK Ps)&#123; Ps-&gt;pTop=(PNODE)malloc(sizeof(NODE)); Ps-&gt;pBottom=(PNODE)malloc(sizeof(NODE));&#125; 运行结果如下：取消掉init（&amp;S）的注释运行结果如下：可以看到malloc函数为结构体STACK里面的两个指针变量附上了新的值，也就是这个指针指向了一个真正的结构体变量。再将代码修改成这种格式 12345678910111213141516171819202122232425262728293031#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;typedef struct Node&#123; int data; struct Node* next;&#125;NODE,*PNODE;typedef struct Stack&#123; PNODE pTop; PNODE pBottom;&#125;STACK,*PSTACK;void init(PSTACK);int main(void)&#123; STACK S; PSTACK P; init(&amp;S); P=&amp;S; printf("%d,%d,%d",P-&gt;pTop,P-&gt;pBottom,P); printf("\n"); printf("%d,%d,%d",P-&gt;pTop-&gt;data,P-&gt;pTop-&gt;next,P-&gt;pTop); printf("\n"); printf("%d,%d,%d",P-&gt;pBottom-&gt;data,P-&gt;pBottom-&gt;next,P-&gt;pBottom); return 0;&#125;void init(PSTACK Ps)&#123; Ps-&gt;pTop=(PNODE)malloc(sizeof(NODE)); Ps-&gt;pBottom=(PNODE)malloc(sizeof(NODE));&#125; 输出的结果变成了这样 STACK结构体里面的两个指针指向的结构体变量里面的值是系统自动分配的值如果将init（&amp;S）注释掉也就是说我不去给指针分配指向的结构体变量，那想要通过这个指针去访问指针所指向的值是根本不行的。]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>概念理解</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[malloc函数的理解]]></title>
    <url>%2F2019%2F08%2F28%2Falgorithm05%2F</url>
    <content type="text"><![CDATA[在数据结构里经常会用到malloc函数，但是它的功能我一直都是很模糊的，今天在看数据结构的时候忽然感觉到顿悟，有一些心得和大家分享一下。先分享这样的一段程序. 12345678910111213141516#include&lt;stdio.h&gt;#include&lt;malloc.h&gt;typedef struct Node&#123; int data; struct Node* next;&#125;NODE,*pNode;int main(void)&#123; pNode Pa; pNode Pb=(pNode)malloc(sizeof(NODE)); //printf("%d,%d,%d",Pa,Pa-&gt;data,Pa-&gt;next); printf("\n"); printf("%d,%d,%d",Pb,Pb-&gt;data,Pb-&gt;next); return 0;&#125; 程序的输出结果是这样的如果把第一个printf取消注释的话运行的结果是这样的由此可见malloc函数的作用下面说一下我对这个函数的一点理解malloc函数是为指向结构体的指针指向了堆内存里面的一个结构体变量，而这个结构体里面的值是系统自动分配的值。如果没用使用malloc函数，那么仅仅是开辟了一块栈内存空间，并没用一个可以指的结构体变量，换做Java来思考的话就相当于你并没有实例化对象，malloc就是实例化对象的一个过程。]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>概念理解</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构里简易的栈]]></title>
    <url>%2F2019%2F08%2F28%2Falgorithm04%2F</url>
    <content type="text"><![CDATA[根据所学自己编写了一个栈的结构，正常使用应该是没问题的 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;typedef struct Node&#123; int data; struct Node* next;&#125;NODE,*PNODE;typedef struct Stack&#123; PNODE pTop; PNODE pBottom;&#125;STACK,*PSTACK;void init(PSTACK);void push(PSTACK,int);void travel(PSTACK);bool isEmpty(PSTACK);void pop(PSTACK,int*);int main(void)&#123; int i=0; STACK S; init(&amp;S); travel(&amp;S); push(&amp;S,1); push(&amp;S,2); push(&amp;S,3); push(&amp;S,4); push(&amp;S,5); push(&amp;S,6); push(&amp;S,7); travel(&amp;S); pop(&amp;S,&amp;i); travel(&amp;S); printf("%d",i); return 0;&#125;void init(PSTACK Ps)&#123; Ps-&gt;pTop=(PNODE)malloc(sizeof(NODE)); if(Ps-&gt;pTop==NULL) &#123; printf("内存分配失败"); exit(-1); &#125; else &#123; Ps-&gt;pBottom=Ps-&gt;pTop; Ps-&gt;pTop-&gt;next=NULL; &#125;&#125;void push(PSTACK Ps,int val)&#123; PNODE pNew=(PNODE)malloc(sizeof(NODE)); if(pNew==NULL) &#123; printf("内存分配失败"); exit(-1); &#125; else&#123; pNew-&gt;data=val; pNew-&gt;next=Ps-&gt;pTop; Ps-&gt;pTop=pNew; &#125;&#125;bool isEmpty(PSTACK Ps)&#123; if(Ps-&gt;pTop==Ps-&gt;pBottom) return true; else return false;&#125;void travel(PSTACK Ps)&#123; if(isEmpty(Ps)) return; PNODE q=Ps-&gt;pTop; while(q!=Ps-&gt;pBottom) &#123; printf("%d \n",q-&gt;data); q=q-&gt;next; &#125;&#125;void pop(PSTACK Ps,int* val)&#123; if(isEmpty(Ps)) return; PNODE P=(PNODE)malloc(sizeof(NODE)); P=Ps-&gt;pTop; *val=P-&gt;data; Ps-&gt;pTop=Ps-&gt;pTop-&gt;next; free(P);&#125;]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>基本数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据结构里循环队列]]></title>
    <url>%2F2019%2F08%2F28%2Falgorithm03%2F</url>
    <content type="text"><![CDATA[12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;#include&lt;malloc.h&gt;#define MAX 10typedef struct Queue&#123; int* pBase;//可以看作数组 int front; int rear;&#125;QUEUE;void init(QUEUE*);bool enQueue(QUEUE*,int);void travel_queue(QUEUE*);bool full_queue(QUEUE*);int main(void)&#123; QUEUE Q; init(&amp;Q); enQueue(&amp;Q,1); enQueue(&amp;Q,2); enQueue(&amp;Q,3); enQueue(&amp;Q,4); enQueue(&amp;Q,5); enQueue(&amp;Q,6); travel_queue(&amp;Q); return 0;&#125;void init(QUEUE *pQ)&#123; pQ-&gt;pBase=(int *)malloc(sizeof(int )*MAX);//开辟队列且定义长度，长度是MAX pQ-&gt;front=0; pQ-&gt;rear=0;&#125;bool full_queue(QUEUE* pQ)&#123; if((pQ-&gt;rear+1)%MAX==pQ-&gt;front) return true; else return false;&#125;bool enQueue(QUEUE* pQ,int val)&#123; if(full_queue(pQ)) &#123; return false; &#125; else &#123; pQ-&gt;pBase[pQ-&gt;rear]=val; pQ-&gt;rear=(pQ-&gt;rear+1)%MAX; return true; &#125;&#125;void travel_queue(QUEUE* pQ)&#123; int i=0; i=pQ-&gt;front; while(i!=pQ-&gt;rear) &#123; printf("%d \n",pQ-&gt;pBase[i]); i=(i+1)%MAX; &#125; return;&#125;]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>基本数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[递归函数的理解]]></title>
    <url>%2F2019%2F08%2F28%2Falgorithm01%2F</url>
    <content type="text"><![CDATA[当一个函数的运行期间调用另一个函数的时候，在运行被调用的函数之前，系统会怎样操作呢：1． 将所有的实参，以及接下来会用到实参的语句的地址等信息传递给被调用的函数保存2． 为被调用的函数的局部变量（还有被调函数里的变量）分配存储空间3． 将控制转移到被调用函数的入口而被调函数结束返回主调函数的之前，系统也是需要做以下的事情：1． 上一步分配的储存空间全部free掉，但是要保存被调函数的返回结果2． 依照开始保存的返回地址将控制转移给调用函数。而在多次调用的时候，按照”后调用先返回”的原则。 也就是说，先把调用的函数拿过来，按照栈的形式进行存储然后再进行操作，例如下面代码： 12345678910111213141516171819202122232425#include&lt;stdio.h&gt;void A();void B();void C();void A()&#123; B();&#125;void B()&#123; C();&#125;void C()&#123; printf("C");&#125;int main(void)&#123; A(); return 0;&#125; 这是一个压栈的过程！在主函数调用A函数的时候，栈顶里存放的就是A函数里的数据，然后A函数又去调用B函数，B函数里的数据就被压进栈中，然后是C函数。当C函数执行完操作的时候，就释放掉其存储空间，然后是B，以此类推，当前运行的函数永远在栈顶。 而递归就是函数自己去调用自己，流程是和上面的一样的，如果懂了上面的操作，那么递归是很容易去理解的。而且在一个函数调用另一个函数的时候，该函数不会继续执行]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>概念理解</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于链表一些有趣的东西]]></title>
    <url>%2F2019%2F08%2F28%2Falgorithm00%2F</url>
    <content type="text"><![CDATA[今天刷题的时候遇见了这个问题 题目出自leetcode 21：合并两个有序链表 将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。示例：输入：1-&gt;2-&gt;4, 1-&gt;3-&gt;4输出：1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4 我想正好可以借这个机会复习一下数据结构的链表的结构，感觉忘的差不多了。。。首先我写出了一个简易的链表代码如下 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;#include&lt;malloc.h&gt;typedef struct Node&#123; int data; struct Node* next;&#125;NODE,*pNode;pNode CreatList()&#123; pNode Ps=(pNode)malloc(sizeof(NODE)); Ps-&gt;data = -1; Ps-&gt;next = NULL; return Ps;&#125;void add(pNode Ps,int val)&#123; pNode pNew=(pNode)malloc(sizeof(NODE)); if(pNew==NULL) &#123; printf("内存分配失败"); exit(-1); &#125; if(Ps-&gt;next == NULL) &#123; pNew-&gt;data = val; Ps-&gt;next = pNew; pNew-&gt;next = NULL; &#125; else &#123; pNode P = Ps; while(P-&gt;next!=NULL) &#123; P=P-&gt;next; &#125; pNew-&gt;data = val; P-&gt;next = pNew; pNew-&gt;next = NULL; &#125; free(p);&#125;void ListPrint(pNode Ps)&#123; pNode P = Ps-&gt;next; while(P!=NULL) &#123; printf("%d\n",P-&gt;data); P=P-&gt;next; &#125;&#125;int main()&#123; pNode Pa; Pa = CreatList(); add(Pa,1); add(Pa,1); add(Pa,1); add(Pa,1); add(Pa,1); ListPrint(Pa); return 0;&#125; 不过在运行的时候我发现，不是我期望的那个结果，没有任何的显示，仔细的检查代码之后，我发现在add函数里的最后我加了一句free(P)，我尝试这将它删掉，程序正常的运行了，结果如下：不过我觉得这是很有意思的事情，我查找了些关于free函数的资料： void free(void *FirstByte)： 该函数是将之前用malloc分配的空间还给程序或者是操作系统，也就是释放了这块内存，让它重新得到自由。 好像并没有解决我的疑问，我又找到了这个 free()释放的是指针指向的内存！注意！释放的是内存，不是指针！指针并没有被释放，指针仍然指向原来的存储空间。指针是一个变量，只有程序结束时才被销毁。释放了内存空间后，原来指向这块空间的指针还是存在！只不过现在指针指向的内容的垃圾，是未定义的，所以说是垃圾。因此，释放内存后把指针指向NULL，防止指针在后面不小心又被解引用了。 也就是说我在free(P)这一句中，我把P指向的内存空间给释放了，所以程序无法继续的运行。。。]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>题目思路</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[二叉树的应用—哈夫曼树]]></title>
    <url>%2F2019%2F08%2F27%2Fdatastructure0501%2F</url>
    <content type="text"><![CDATA[带权路径长度 路径长度：路径上所经历的边的个数 结点的权：结点被赋予的数值 树的带权路径长度*： 树中所有叶节点的带权路径之和 哈夫曼树：也成为最优二叉树，就是含n的带权叶子结点的树之中带权路径长度最小的二叉树。在上面的两个树中第二棵树就是一颗哈夫曼树。 构造哈夫曼树，只需按照步骤一步一步来即可哈夫曼树在构造的时候没有规定左右子树，所以其不唯一 哈夫曼树的性质 哈夫曼树的应用编码：对于一个字符串序列，用二进制数来表示每一个字符 使用哈夫曼树构造的过程如下这样构造出来的编码不会产生歧义，且长度变短了]]></content>
      <categories>
        <category>874数据结构复习</category>
      </categories>
      <tags>
        <tag>树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[二叉树的应用—平衡二叉树]]></title>
    <url>%2F2019%2F08%2F27%2Fdatastructure05%2F</url>
    <content type="text"><![CDATA[平衡二叉树：AVL，在任意结点的平衡因子的绝对值不超过一。平衡因子：左子树高度减去右子树高度 计算高度为h的最小平衡二叉树的节点数Nh 平衡二叉树的判断代码如下 1234567891011121314151617181920212223242526void Judge_AVL(BiTree bt,int &amp;Balance,int &amp;h)&#123; //使用引用类型是因为要修改值的原因 int bl=0,br=0,hl=0,hr=0; if (bt == NULL)&#123; h = 0; Balance = 1; &#125; else if (bt-&gt;lchild == NULL&amp;&amp;bt-&gt;rchild == NULL)&#123; h = 1; Balance = 1; &#125; else&#123; Judge_AVL(bt-&gt;lchild,bl,hl); Judge_AVL(bt-&gt;rchild,br,hr); if (hl &gt; hr)&#123;//判断那个高，选哪个做整个树的高度 h = hl+1; &#125;else&#123; h = hr+1; &#125; if (abs(hr-hl) &lt; 2&amp;&amp;bl = 1&amp;&amp;br = 1)&#123; //根结点平衡，以及左右子树均平衡 Balance = 1; &#125;else Balance = 0; &#125;&#125; 平衡二叉树的插入基本的思想是先插入，后调整，注意每次调整一定要是最小不平衡子树方可 图解很好理解，多看几遍就好* 方法1 LL平衡旋转（右单旋转）在结点A的左孩子的左子树上插入新节点（左子树的左右结点都可以，不受影响）让B结点上去，B的右结点更改为A，B真正的有节点改为A的左结点，因为B本身是A的左结点 方法2 RR平衡旋转（左单旋转）在结点A的右孩子的右子树上插入新节点（右子树的左右结点都可以，不受影响） 跟右旋一致，可以先变化为方法1的树，操作结束后再变换为原树。 方法3 LR平衡旋转（先左后右双旋转）在结点A的左孩子的右子树插入了新的结点 方法4 RL平衡旋转（先右后左双旋转）在在结点A的右孩子的左子树插入了新的结点]]></content>
      <categories>
        <category>874数据结构复习</category>
      </categories>
      <tags>
        <tag>树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[树的应用—二叉排序树]]></title>
    <url>%2F2019%2F08%2F26%2Fdatastructure04%2F</url>
    <content type="text"><![CDATA[二叉排序树可以为空树，也可以为非空树，为非空树时有以下特点 若左子树非空，则左子树上所有结点值均小于根结点的值 若右子树非空，则右子树上所有结点值均大于根结点的值 注意这里没有等于，也就是说二叉排序树中默认是没有相同值结点的* 左，右子树本身也是一颗二叉排序树 二叉排序树进行中序遍历后，序列即为一个递增的有序序列 查找操作二叉树非空时，查找根结点，若相等则查找成功；若不等，则小于根结点查左子树，大于查右子树当查找到叶子结点还未找到，查找失败代码实现，看懂就行 插入操作若二叉排序树为空时，直接插入结点若二叉排序树非空时，值小于根结点值时，插入左子树；大于插入右子树，等于不能插入。（使用递归来实现） 1234567891011121314151617int BST_Insert(BiTree &amp;T,KeyType k)&#123; if (T == NULL)&#123; T = (BiTree)malloc(sizeof(BSTNode)); T-&gt;key = k; T-&gt;lchild = T-&gt;rchild = NULL; return 1; &#125; else if (k == T-&gt;key)&#123; return 0; &#125; else if (k &lt; T-key)&#123; return BSTNode(T-&gt;lchild,k); &#125; else if (k &gt; T-key)&#123; return BSTNode(T-&gt;rchild,k); &#125;&#125; 构造二叉排序树构造的过程是一个动态的过程，不断的调用插入函数来进行构造读入一个元素并建立结点，若二叉树为空将其作为根结点；若二叉排序树非空，小于插左子树，大于插右子树。 123456789void Create_BST(BiTree &amp;T,keyType str[],int n)&#123;//str存放插入的元素，n为插入的个数 T = NULL; int i = 0; while(i&lt;n)&#123; BST_Insert(T,str[i]); i++; &#125;&#125; 删除 若删除结点为叶子结点，则直接删除 若删除结点z有一颗子树y，那么选取这棵子树y代替该结点z的位置 若删除结点z有两颗子树，直接让z的中序遍历直接后继x，直接代替z的位置，然后执行删除x的操作，以此类推。最终会变成上面的两种情况。 删除一个结点，然后再插入该结点，所得到的二叉排序树可能会不一样]]></content>
      <categories>
        <category>874数据结构复习</category>
      </categories>
      <tags>
        <tag>树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[树的应用—并查集]]></title>
    <url>%2F2019%2F08%2F26%2Fdatastructure03%2F</url>
    <content type="text"><![CDATA[并查集是一种简单的集合表示使用树的双亲表示法作为并查集的存储结构，通常使用数组元素的下标代表元素名，用根结点的下标代表子集合名，根结点的双亲结点为负数 操作如下 将集合中的所有元素初始化为只有一个单元素的子集合当集合变为一下情况时，存储结构变化如下 0的树上共有四个元素，所以0位置的双亲值为4，因为是根结点，值为-4。3的双亲结点为2，所以双亲值为2。剩余元素以此类推 代码实现并查集的操作这里的S数组存储的是并查集里双亲结点的下标 1234567891011121314151617181920#define SIZE 100int UFset[SIZE]void Initial(int S[])&#123; for (int i = 0; i &lt; size; ++i) &#123; S[i] = -1; &#125;&#125;int Find(int S[],int x)&#123;//要找出的是x元素所在树的根结点，因为根结点双亲值为负 while(S[x]&gt;=0) x = S[x]; return x;&#125;void Union(int S[],int Root1,int Root2)&#123;//合并就是把Roo2子集变为Root1的子集 S[Root2] = Root1;&#125; 合并操作图解]]></content>
      <categories>
        <category>874数据结构复习</category>
      </categories>
      <tags>
        <tag>树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[树和森林的遍历]]></title>
    <url>%2F2019%2F08%2F26%2Fdatastructure02%2F</url>
    <content type="text"><![CDATA[树的遍历 先根遍历若树非空，则先访问根结点，再按从左到右的顺序遍历根结点的每棵子树 先根遍历：RADEBCFGHK将其转化为二叉树之后，先序遍历：RADEBCFGHK######树的先根遍历序列与这棵树对应二叉树的先序遍历序列相同 后根遍历若树非空，则先按从左到右的顺序遍历根结点的每颗子树，再访问根结点后根遍历序列：DEABGHKFCR将其转化为二叉树之后，中序遍历：DEABGHKFCR######树的后根遍历序列与这棵树对应二叉树的中序遍历序列相同 这里没有中根遍历是因为树并不是像二叉树一样分为左右子树，无法中根遍历* 层次遍历按照标号的顺序，由上至下，由左至右的顺序，一层一层遍历 森林的遍历 先序遍历######等同于将森林转化为二叉树之后的先序遍历 中序遍历######等同于将森林转化为二叉树之后的中序遍历内容过于简单，不再多余赘述了]]></content>
      <categories>
        <category>874数据结构复习</category>
      </categories>
      <tags>
        <tag>树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[森林，树，二叉树转化]]></title>
    <url>%2F2019%2F08%2F26%2Fdatastructure01%2F</url>
    <content type="text"><![CDATA[树与二叉树之间的转换依靠的原则是左孩子，右兄弟的原则每个结点左指针指向第一个孩子结点，右指针指向树中的相邻结点 森林与二叉树之间的转换也是同样的道理，只不过根结点的相邻结点即为相邻树的根结点]]></content>
      <categories>
        <category>874数据结构复习</category>
      </categories>
      <tags>
        <tag>树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[中序遍历建立线索二叉树]]></title>
    <url>%2F2019%2F08%2F24%2Fdatastructure00%2F</url>
    <content type="text"><![CDATA[为什么使用中序遍历来建立线索二叉树？ 因为中序遍历方便寻找前驱节点和后继节点，而先序遍历不方便找后继节点，后序遍历不方便找前驱节点和后继节点。 中序遍历线索二叉树的特点这里需要理解一下指针不为线索时的情况（中序遍历） 建立代码 12345678910111213141516void InThread(ThreadTree &amp;p,ThreadTree &amp;pre)&#123; if(p!=NULL)&#123; InThread(p-&gt;lchild,pre); if (p-&gt;lchild==NULL)&#123; p-&gt;lchild = pre; p-&gt;tap=1; &#125; if (pre!=NULL &amp;&amp; p-&gt;rchild==NULL)&#123; pre-&gt;rchild = p; pre-&gt;rtag = 1; &#125; pre = p; InThread(p-&gt;rchild,pre); &#125;&#125; 理解不来，背下即可，与中序遍历相似。只不过在递归中加入了线索化的过程。\]]></content>
      <categories>
        <category>874数据结构复习</category>
      </categories>
      <tags>
        <tag>树</tag>
      </tags>
  </entry>
</search>
