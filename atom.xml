<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>风拂流苏亦浩然</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-09-04T01:46:24.661Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>L1nxi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>图—应用（最短路径）</title>
    <link href="http://yoursite.com/2019/09/03/datastructure15/"/>
    <id>http://yoursite.com/2019/09/03/datastructure15/</id>
    <published>2019-09-03T13:06:18.000Z</published>
    <updated>2019-09-04T01:46:24.661Z</updated>
    
    <content type="html"><![CDATA[<p><strong>最短路径</strong>：两个顶点之间带权路径长度最短的路径为最短路径<br>寻找图中的最短路径方法</p><ul><li><p>Dijksta：带权图单源最短路径（一个顶点为源点，到其他各个顶点的最短路径）<br>实例描述</p><a id="more"></a><p><img src="https://upload-images.jianshu.io/upload_images/8889168-8dba651516c4a8ec.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="初始化"></p></li><li><p>dist数组存放的是第一个顶点0，到其他顶点之间的连线的权值，如果不存在则为无穷</p></li><li><p>s数组表示的是计算完成的顶点，这里0计算完成，对应数组值置为1</p></li><li><p>path数组表示的是0这个顶点能达到的顶点，将其置为0点的数组下标0<br><img src="https://upload-images.jianshu.io/upload_images/8889168-c6be64cdaac12b99.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="第一轮"></p></li></ul><ul><li>dist数组：其中除去0点值，最小值为3，所以把顶点2加入到已经计算完成的顶点集中，顶点2可以达到的顶点为4，0-&gt;2-&gt;4=7，小于0-&gt;4=8，所以4对应的下标更改为7。</li><li>s数组：将顶点2对应的位置赋值为1，表示顶点2计算完成</li><li>path：将顶点4对应的下标赋值为2，因为是从顶点2到达的顶点4<br><img src="https://upload-images.jianshu.io/upload_images/8889168-7b910c5d3efc42b4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="以此类推得到结果"></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/8889168-cd075aac1af1684c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="根据各个数组的数值获得信息"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;最短路径&lt;/strong&gt;：两个顶点之间带权路径长度最短的路径为最短路径&lt;br&gt;寻找图中的最短路径方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Dijksta：带权图单源最短路径（一个顶点为源点，到其他各个顶点的最短路径）&lt;br&gt;实例描述&lt;/p&gt;
    
    </summary>
    
    
      <category term="874数据结构复习" scheme="http://yoursite.com/categories/874%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/"/>
    
    
      <category term="图" scheme="http://yoursite.com/tags/%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>图—应用（最小生成树）</title>
    <link href="http://yoursite.com/2019/09/03/datastructure14/"/>
    <id>http://yoursite.com/2019/09/03/datastructure14/</id>
    <published>2019-09-03T11:40:00.000Z</published>
    <updated>2019-09-03T11:51:38.894Z</updated>
    
    <content type="html"><![CDATA[<p><strong>最小生成树</strong></p><ul><li>生成树：在连通图之中包含全部顶点的极小连通子图（也就是包含全部顶点，且边最少的子图）<br>（子图即是图中顶点属于原图顶点集的子集，边属于原图边集的子集）<a id="more"></a><img src="https://upload-images.jianshu.io/upload_images/8889168-afaa2e7f807ee886.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="有环状结构不是生成树，非联通的图也不是生成树"></li><li><em>最小生成树*</em>：对于<strong>带权的无向连通图</strong>G，G的所有生成树之中边的权值之和最小的生成树，称之为最小生成树（MST）</li></ul><p><strong>最小生成树的性质</strong></p><ul><li>最小生成树不一定唯一，当出现<br>1：无向连通图G的各边值不唯一<br>2：G只有顶点数-1条边的时候</li><li><em>最小生成树是唯一的*</em></li><li>最小生成树的权值是唯一的，且是最小的</li><li>最小生成树的边数为顶点-1</li></ul><p><strong>生成最小生成树的算法</strong><br>1：Prim<br>直接上例子<br><img src="https://upload-images.jianshu.io/upload_images/8889168-33bfa4dd254a4302.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="首先在顶点集中任意选取一个顶点，这里选择顶点A"><br>min_weight数组存放的是顶点A到达其他顶点的权值，当没有连线时，距离设置为无穷，adjvex数组存放的是生成树的连接顺序，这里默认都为0<br><img src="https://upload-images.jianshu.io/upload_images/8889168-6f46e9c964b5e33a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="选取上一步中min_weight数组里最小值所对应的边A-C，将C加入到生成树的顶点集"></p><ul><li>min_weight数组里C对应的位置改为0，因为C也可以到达B点，且距离比A-B更短，B对应的值更改为C-B的值，C可以到达D，D对应的值更改为C-D。</li><li>adjvex数组因为C连接到了A，C对应的值更改为A对应的下标，因为A的下标为0，与初始值相同，故没看出变化。<br><img src="https://upload-images.jianshu.io/upload_images/8889168-5cfc135f43f42f92.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="以此类推，生成Prim算法下的最小生成树"></li></ul><p><strong>总结：Prim算法的时间复杂度为O（|V^2|）,与边的数量无关，故该算法适用于边稠密的图</strong></p><p>2：Kruskal<br>使用的时候需要两个辅助的方法</p><ul><li>堆排序</li><li>并查集</li></ul><p>直接使用例子<br><img src="https://upload-images.jianshu.io/upload_images/8889168-3622e5ac6771cabd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="堆排序把边按顺序排列，并查集置为-1"><br><img src="https://upload-images.jianshu.io/upload_images/8889168-df73df562968dbc6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="寻找权值最小的边，更改并查集的值"><br>选定值最小的边AC，将C与A连接，对应并查集里C的顶点值置为A所对应的数组下标。<br><img src="https://upload-images.jianshu.io/upload_images/8889168-32bf241611106e40.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="第二条边加入"></p><p><strong>下一条边AB如果加入到生成树中，会产生回路，这里并查集的作用就体现了，如果要加入的边对应两个顶点在并查集里的根节点相同，那么就会产生回路，不能加入这条边。</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/8889168-4334cdc11e727cba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="最终结果如下"></p><p><strong>总结：Kruskal算法的时间复杂度O（|E|log|E|），与顶点无关，更适用于稠密图</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;最小生成树&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;生成树：在连通图之中包含全部顶点的极小连通子图（也就是包含全部顶点，且边最少的子图）&lt;br&gt;（子图即是图中顶点属于原图顶点集的子集，边属于原图边集的子集）
    
    </summary>
    
    
      <category term="874数据结构复习" scheme="http://yoursite.com/categories/874%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/"/>
    
    
      <category term="图" scheme="http://yoursite.com/tags/%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>图—遍历（深度优先搜索）</title>
    <link href="http://yoursite.com/2019/09/03/datastructure13/"/>
    <id>http://yoursite.com/2019/09/03/datastructure13/</id>
    <published>2019-09-03T11:39:53.000Z</published>
    <updated>2019-09-03T11:42:41.673Z</updated>
    
    <content type="html"><![CDATA[<p>深度优先搜索类似于树的先序遍历，其遵循的策略是尽可能深地去搜索一个图。同样也会用到辅助数组，该结构使用栈来进行操作。<br>没啥可写的，遇见题再过来补充吧</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;深度优先搜索类似于树的先序遍历，其遵循的策略是尽可能深地去搜索一个图。同样也会用到辅助数组，该结构使用栈来进行操作。&lt;br&gt;没啥可写的，遇见题再过来补充吧&lt;/p&gt;
    
    </summary>
    
    
      <category term="874数据结构复习" scheme="http://yoursite.com/categories/874%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/"/>
    
    
      <category term="图" scheme="http://yoursite.com/tags/%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>图—遍历（广度优先搜索）</title>
    <link href="http://yoursite.com/2019/09/03/datastructure12/"/>
    <id>http://yoursite.com/2019/09/03/datastructure12/</id>
    <published>2019-09-03T11:39:48.000Z</published>
    <updated>2019-09-03T11:42:30.022Z</updated>
    
    <content type="html"><![CDATA[<p><strong>广度优先搜索</strong></p><ul><li>首先访问起始点v</li><li>接着由出发点一次访问v的每一个未访问的邻接顶点 w1,w2…wi</li><li>然后依次访问w1,w2…wi的每一个未访问的邻接顶点</li><li>以此类推<a id="more"></a>实现的方法是使用<strong>队列+辅助数组</strong>，辅助数组的使用是为了避免重复访问同一个顶点，造成不必要的开销<br>该算法的空间复杂度是O（v），时间复杂度分为两种</li><li>邻接矩阵表示法：O（v^2）</li><li>邻接表表示法：O（v+e）</li><li><em>e为边的数量，v为顶点的数量*</em></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;广度优先搜索&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先访问起始点v&lt;/li&gt;
&lt;li&gt;接着由出发点一次访问v的每一个未访问的邻接顶点 w1,w2…wi&lt;/li&gt;
&lt;li&gt;然后依次访问w1,w2…wi的每一个未访问的邻接顶点&lt;/li&gt;
&lt;li&gt;以此类推
    
    </summary>
    
    
      <category term="874数据结构复习" scheme="http://yoursite.com/categories/874%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/"/>
    
    
      <category term="图" scheme="http://yoursite.com/tags/%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>图—存储及操作（邻接多重表）</title>
    <link href="http://yoursite.com/2019/09/03/datastructure11/"/>
    <id>http://yoursite.com/2019/09/03/datastructure11/</id>
    <published>2019-09-03T11:39:43.000Z</published>
    <updated>2019-09-03T11:42:23.492Z</updated>
    
    <content type="html"><![CDATA[<p>无向图的一种链式存储结构</p><a id="more"></a><p><img src="https://upload-images.jianshu.io/upload_images/8889168-8dbe17b9f86732d9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="使用邻接表存储无向图"><br>邻接表的缺点是：如果删除一条边，需要遍历整个表，找到对应的两个边表结点进行删除。操作效率较低。<br><img src="https://upload-images.jianshu.io/upload_images/8889168-757e64b79444ead6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="多重邻接表的构成"><br>在这里的边表中，既要保存第一个顶点的相关信息，也要保存第二个顶点的相关信息。<br><strong>顶点表</strong></p><ul><li>data：存储此顶点的数据；</li><li>firstedge：指针域，用于指向同该顶点有直接关联的存储其他顶点的节点。</li></ul><p><strong>边表</strong></p><ul><li>ivex 和 jvex：数据域，分别存储图中各边两端的顶点所在数组中的位置下标；</li><li>ilink：指针域，指向下一个存储与 ivex 有直接关联顶点的节点；</li><li>jlink：指针域，指向下一个存储与 jvex 有直接关联顶点的节点；</li><li>info：指针域，用于存储与该顶点有关的其他信息，比如无向网中各边的权；</li><li>mark：标志域，用于标记此节点是否被操作过，例如在对图中顶点做遍历操作时，为了防止多次操作同一节点，mark 域为 0 表示还未被遍历；mark 为 1 表示该节点已被遍历；<br><img src="https://upload-images.jianshu.io/upload_images/8889168-498729ee359afc34.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="例"></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;无向图的一种链式存储结构&lt;/p&gt;
    
    </summary>
    
    
      <category term="874数据结构复习" scheme="http://yoursite.com/categories/874%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/"/>
    
    
      <category term="图" scheme="http://yoursite.com/tags/%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>图—存储及操作（十字链表法）</title>
    <link href="http://yoursite.com/2019/09/03/datastructure10/"/>
    <id>http://yoursite.com/2019/09/03/datastructure10/</id>
    <published>2019-09-03T11:36:46.000Z</published>
    <updated>2019-09-03T11:42:19.335Z</updated>
    
    <content type="html"><![CDATA[<p><strong>十字链表法</strong>是一种针对有向图的<strong>链式</strong>存储结构<br>在邻接表法里，找到顶点的出边是很容易的，但是找到顶点的入边却要遍历整个所有顶点的边表，很复杂。<br>但是十字链表里，寻找顶点的出边和入边都很容易</p><a id="more"></a><ul><li>顶点表的区域分别为：<br>入边表中第一个结点(那条边是指向该顶点的)<br>出边表中第一个结点(那条边是由该顶点出发的)</li><li>边表的区域分别为：<br>弧起点在顶点的下标，<br>弧终点在顶点表中的下标，</li><li><em>终点*</em>相同的一下条边</li><li><em>起点*</em>相同的下一条边<br>如果是网，还可以再增加一个weight域来存储权值。<br><img src="https://upload-images.jianshu.io/upload_images/8889168-5406f17d65c61b71.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图解"></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;十字链表法&lt;/strong&gt;是一种针对有向图的&lt;strong&gt;链式&lt;/strong&gt;存储结构&lt;br&gt;在邻接表法里，找到顶点的出边是很容易的，但是找到顶点的入边却要遍历整个所有顶点的边表，很复杂。&lt;br&gt;但是十字链表里，寻找顶点的出边和入边都很容易&lt;/p&gt;
    
    </summary>
    
    
      <category term="874数据结构复习" scheme="http://yoursite.com/categories/874%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/"/>
    
    
      <category term="图" scheme="http://yoursite.com/tags/%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>图—存储及操作（邻接表法）</title>
    <link href="http://yoursite.com/2019/09/03/datastructure09/"/>
    <id>http://yoursite.com/2019/09/03/datastructure09/</id>
    <published>2019-09-03T11:36:39.000Z</published>
    <updated>2019-09-03T11:42:13.686Z</updated>
    
    <content type="html"><![CDATA[<p>对于边稀少的图（稀疏图）使用邻接矩阵法会产生大量空间浪费</p><a id="more"></a><p><img src="https://upload-images.jianshu.io/upload_images/8889168-8f12fececf1aa8e3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt><br><strong>邻接表法</strong><br>同样分为两个表：顶点表（采用顺序存储），边表（采用链式存储）<br><img src="https://upload-images.jianshu.io/upload_images/8889168-fff1e23111b72ac8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="有向图的邻接表"><br><img src="https://upload-images.jianshu.io/upload_images/8889168-b0cbe0cd493d2e08.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="无向图的邻接表"><br><strong>邻接表法的特点</strong></p><ul><li>若G为无向图，存储空间为：边+二倍顶点</li><li>若G为无向图，存储空间为：边+顶点</li><li>邻接表更适合应用于稀疏图</li><li>若G为无向图，则结点的度为该结点边表的长度</li><li>若G为有向图，则结点的出度为该结点边表的长度，入度则需要遍历这个边表</li><li>邻接表不唯一</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于边稀少的图（稀疏图）使用邻接矩阵法会产生大量空间浪费&lt;/p&gt;
    
    </summary>
    
    
      <category term="874数据结构复习" scheme="http://yoursite.com/categories/874%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/"/>
    
    
      <category term="图" scheme="http://yoursite.com/tags/%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>图—存储及操作（邻接矩阵法）</title>
    <link href="http://yoursite.com/2019/09/03/datastructure08/"/>
    <id>http://yoursite.com/2019/09/03/datastructure08/</id>
    <published>2019-09-03T11:36:33.000Z</published>
    <updated>2019-09-03T11:42:07.651Z</updated>
    
    <content type="html"><![CDATA[<p>邻接矩阵就是把一个图的点集和边集，通过一二维矩阵的方式存储</p><a id="more"></a><p><img src="https://upload-images.jianshu.io/upload_images/8889168-bfc1f74643a7d7e1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="邻接矩阵示意图"><br>邻接矩阵存储边的关系是，存在该边则值为1，不存在则值为0<br><img src="https://upload-images.jianshu.io/upload_images/8889168-d5410eb093451a07.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="邻接矩阵法具体的存放方式"><br><img src="https://upload-images.jianshu.io/upload_images/8889168-714e6d2da92c5c46.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="例：有向图"><br><img src="https://upload-images.jianshu.io/upload_images/8889168-0df524b8852c27ba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="例：无向图"><br><strong>有权重的图（网）的存放方法：存在边在矩阵里存放的值即为权值，不存在边则在矩阵存放0/无穷</strong><br><img src="https://upload-images.jianshu.io/upload_images/8889168-d132fd4b5771953e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="权重分配"><br><img src="https://upload-images.jianshu.io/upload_images/8889168-0681a0ef81b0c475.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="例"><br><strong>邻接矩阵法的性质</strong></p><ul><li>适用于稠密图，因为无论边是否存在，我们都为其申请存储空间</li><li>无向图的邻接矩阵为对称矩阵</li><li>无向图中第i行（或第i列）带权值元素的个数，为第i个顶点的度</li><li>有向图中第i行（第i列）带权值元素的个数，为第i个顶点的出度（入度）</li></ul><p>###图G的邻接矩阵为A，A的n次方的含义是？<br><strong>A^n[i][j]表示的是从顶点Vi到顶点Vj长度为n的路径条数</strong><br><img src="https://upload-images.jianshu.io/upload_images/8889168-e1c8b24cb8f2ded2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="n=2时，n=3，4，5....以此类推即可"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;邻接矩阵就是把一个图的点集和边集，通过一二维矩阵的方式存储&lt;/p&gt;
    
    </summary>
    
    
      <category term="874数据结构复习" scheme="http://yoursite.com/categories/874%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/"/>
    
    
      <category term="图" scheme="http://yoursite.com/tags/%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>图的基本概念2</title>
    <link href="http://yoursite.com/2019/09/03/datastructure07/"/>
    <id>http://yoursite.com/2019/09/03/datastructure07/</id>
    <published>2019-09-03T11:36:27.000Z</published>
    <updated>2019-09-03T11:42:57.792Z</updated>
    
    <content type="html"><![CDATA[<p><strong>连通（无向图）与强连通（有向图）</strong></p><a id="more"></a><p><img src="https://upload-images.jianshu.io/upload_images/8889168-2efaf60752c71da5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="有向图与无向图之间的连通，强连通"><br><strong>连通图（无向图）与强连通图（有向图）</strong><br><img src="https://upload-images.jianshu.io/upload_images/8889168-63bfa6e2d372f376.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="连通图与强连通图"></p><p><strong>常考考点</strong>：n个顶点的连通图(强连通图)最少有多少条边<br><img src="https://upload-images.jianshu.io/upload_images/8889168-deb61b30d53a93b5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="无向图，有向图的最少边数"><br><strong>连通分量与强连通分量</strong>：这里一定要搞明白<br><img src="https://upload-images.jianshu.io/upload_images/8889168-5400baec0e80c0cf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="无向图"><br>左边的图为原图，右边的四个为连通子图，我们要找的是连通分量=&gt;极大连通子图。在这里很清楚的看到圈出来的两个图，没有<strong>更大</strong>的连通子图，把它们包含起来。所以圈出来的就是<strong>极大连通子图</strong><br><img src="https://upload-images.jianshu.io/upload_images/8889168-a8a02559510f54d1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="有向图"><br>右边的四个图为强连通图的强连通子图，圈出来的即为强连通分量=&gt;极大强连通子图<br><strong>结论：</strong></p><ul><li>如果原图是一个连通图或者强连通图，那么它的连通分量或者强连通分量都是与原图一样的。</li><li>如果原图不是一个连通图或者强连通图，那么它的连通分量或者强连通分量会有许多个</li></ul><p><strong>极小连通子图</strong><br><img src="https://upload-images.jianshu.io/upload_images/8889168-cb6b58bef10a77a9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="极小连通子图示意图"><br><strong>生成树</strong><br><img src="https://upload-images.jianshu.io/upload_images/8889168-d2a3fa2cd54d2b47.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="生成树示意图"><br>这里注意一点，生成树是包含多有顶点的一个极小连通子图，而且是不唯一的。<br><strong>n个顶点图的生成树有n-1条边</strong></p><p><strong>生成森林</strong><br>连通图只能生成树，非连通图则可以生成森林<br><img src="https://upload-images.jianshu.io/upload_images/8889168-3ce2160044200bfa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="生成森林图示"></p><p><strong>顶点的度</strong><br>以该顶点为一个端点的边的数目<br><img src="https://upload-images.jianshu.io/upload_images/8889168-fc04afbc1fc7d49f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="有向图和无向图的度"></p><ul><li>无向图中顶点的度就是连接该顶点的边数</li><li>有向图中顶点的度=出度+入度</li></ul><p><strong>网</strong><br>即每个边都有一个权值<br><img src="https://upload-images.jianshu.io/upload_images/8889168-84e550d14865cc1a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="网示意图"></p><p><strong>稠密图和稀疏图</strong><br><img src="https://upload-images.jianshu.io/upload_images/8889168-7c384374bb5759bf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="稠密图和稀疏图示意图"></p><p><strong>有向树</strong><br><img src="https://upload-images.jianshu.io/upload_images/8889168-f394c196783d1e85.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="有向树示意图"><br>有向树跟树的区别是：<strong>有向树是图</strong><br>若为树结构：第二层左边第一个结点的度为2<br>若为有向树结构：第二层左边第一个结点的度为3</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;连通（无向图）与强连通（有向图）&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="874数据结构复习" scheme="http://yoursite.com/categories/874%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/"/>
    
    
      <category term="图" scheme="http://yoursite.com/tags/%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>图的基本概念1</title>
    <link href="http://yoursite.com/2019/09/03/datastructure06/"/>
    <id>http://yoursite.com/2019/09/03/datastructure06/</id>
    <published>2019-09-03T11:36:22.000Z</published>
    <updated>2019-09-03T11:48:47.683Z</updated>
    
    <content type="html"><![CDATA[<p>图是由顶点和边构成，定义如下</p><a id="more"></a><p><img src="https://upload-images.jianshu.io/upload_images/8889168-8d04fee3c35597fb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图的定义"><br><strong><em>线性表，树可以为空，但是图不能为空</em></strong></p><p><strong>图的分类</strong><br><img src="https://upload-images.jianshu.io/upload_images/8889168-1fcdb7b10345f8fb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="无向图，有向图"><br><img src="https://upload-images.jianshu.io/upload_images/8889168-e8df36e8adaaf9bf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="简单图，多重图"><br>注意第二个图A-&gt;B!=B-&gt;A因为它是有方向的，所以属于简单图</p><p><strong>完全图</strong><br><img src="https://upload-images.jianshu.io/upload_images/8889168-62cbfefaae963196.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="无向完全图，有向完全图"></p><p><strong>子图</strong><br><img src="https://upload-images.jianshu.io/upload_images/8889168-13c4630b23490211.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="子图定义"><br><img src="https://upload-images.jianshu.io/upload_images/8889168-725dc9d71aade366.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="常规子图"><br><img src="https://upload-images.jianshu.io/upload_images/8889168-c9ae000bb02c70fd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="生成子图，图中元素与原图一致"><br><img src="https://upload-images.jianshu.io/upload_images/8889168-dd829800eddcc557.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="原图也是子图"><br><img src="https://upload-images.jianshu.io/upload_images/8889168-1cf465c2afcc34ef.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="空集也是子图"><br><img src="https://upload-images.jianshu.io/upload_images/8889168-31d1e79be8d6872d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="不是子图的典例：这不是一个图"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;图是由顶点和边构成，定义如下&lt;/p&gt;
    
    </summary>
    
    
      <category term="874数据结构复习" scheme="http://yoursite.com/categories/874%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/"/>
    
    
      <category term="图" scheme="http://yoursite.com/tags/%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode的第14题</title>
    <link href="http://yoursite.com/2019/08/28/algorithm08/"/>
    <id>http://yoursite.com/2019/08/28/algorithm08/</id>
    <published>2019-08-28T00:10:08.000Z</published>
    <updated>2019-08-31T14:52:50.777Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>给定一个 32 位有符号整数，将整数中的数字进行反转。</p></blockquote><blockquote><p>示例 1:<br>输入: 123<br>输出: 321<br>示例 2:<br>输入: -123<br>输出: -321<br>示例 3:<br>输入: 120<br>输出: 21<br>注意:<br>假设我们的环境只能存储 32 位有符号整数，其数值范围是 [−231,  231 − 1]。根据这个假设，如果反转后的整数溢出，则返回 0。</p></blockquote><a id="more"></a><p><strong>解题的整个过程:</strong><br>在这里说一下我在解决这个问题中遇到的问题,首先我找到了这个代码:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;  </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span>  </span><br><span class="line"><span class="keyword">public</span>:  </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x)</span>  </span></span><br><span class="line"><span class="function">    </span>&#123;  </span><br><span class="line">        <span class="keyword">int</span> reverseX=<span class="number">0</span>;  </span><br><span class="line">        <span class="keyword">int</span> temp;  </span><br><span class="line">        <span class="keyword">int</span> a;  </span><br><span class="line">        <span class="keyword">int</span> biaozhi=<span class="number">1</span>;  </span><br><span class="line">        <span class="keyword">if</span> (x&lt;<span class="number">0</span>)<span class="comment">//如果x小于0，将它变成正的  </span></span><br><span class="line">        &#123;  </span><br><span class="line">            biaozhi=<span class="number">-1</span>;  </span><br><span class="line">            x=<span class="built_in">abs</span>(x);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">while</span>(x!=<span class="number">0</span>)<span class="comment">//当x不等于0的时候  </span></span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">if</span> (reverseX&gt;(INT_MAX-x%<span class="number">10</span>)/<span class="number">10</span>)<span class="comment">//判断是否溢出  </span></span><br><span class="line">            &#123;  </span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">else</span>  </span><br><span class="line">            &#123;  </span><br><span class="line">                temp=x%<span class="number">10</span>;  </span><br><span class="line">                reverseX=reverseX*<span class="number">10</span>+temp;  </span><br><span class="line">                x=x/<span class="number">10</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> reverseX*biaozhi;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    Solution s;  </span><br><span class="line">    <span class="keyword">int</span> i=s.reverse(<span class="number">1534236469</span>);  </span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="built_in">endl</span>;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这个代码中</p><blockquote><p>if (reverseX&gt;(INT_MAX-x%10)/10)//判断是否溢出  </p></blockquote><p>这一句我并没有理解,为此我思考了很久<br>见如下的代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;  </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span>  </span><br><span class="line"><span class="keyword">public</span>:  </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x)</span>  </span></span><br><span class="line"><span class="function">    </span>&#123;  </span><br><span class="line">        <span class="keyword">int</span> reverseX=<span class="number">0</span>;  </span><br><span class="line">        <span class="keyword">int</span> temp;  </span><br><span class="line">        <span class="keyword">int</span> a;  </span><br><span class="line">        <span class="keyword">int</span> biaozhi=<span class="number">1</span>;  </span><br><span class="line">        <span class="keyword">if</span> (x&lt;<span class="number">0</span>)<span class="comment">//如果x小于0，将它变成正的  </span></span><br><span class="line">        &#123;  </span><br><span class="line">            biaozhi=<span class="number">-1</span>;  </span><br><span class="line">            x=<span class="built_in">abs</span>(x);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">while</span>(x!=<span class="number">0</span>)<span class="comment">//当x不等于0的时候  </span></span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">if</span> (reverseX&gt;(<span class="number">200</span>-x%<span class="number">10</span>)/<span class="number">10</span>)<span class="comment">//判断是否溢出  </span></span><br><span class="line">            &#123;  </span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">else</span>  </span><br><span class="line">            &#123;  </span><br><span class="line">                temp=x%<span class="number">10</span>;  </span><br><span class="line">                reverseX=reverseX*<span class="number">10</span>+temp;  </span><br><span class="line">                x=x/<span class="number">10</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> reverseX*biaozhi;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">reverse1</span><span class="params">(<span class="keyword">int</span> x)</span>  </span></span><br><span class="line"><span class="function">    </span>&#123;  </span><br><span class="line">        <span class="keyword">int</span> reverseX=<span class="number">0</span>;  </span><br><span class="line">        <span class="keyword">int</span> temp;  </span><br><span class="line">        <span class="keyword">int</span> a;  </span><br><span class="line">        <span class="keyword">int</span> biaozhi=<span class="number">1</span>;  </span><br><span class="line">        <span class="keyword">if</span> (x&lt;<span class="number">0</span>)<span class="comment">//如果x小于0，将它变成正的  </span></span><br><span class="line">        &#123;  </span><br><span class="line">            biaozhi=<span class="number">-1</span>;  </span><br><span class="line">            x=<span class="built_in">abs</span>(x);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">while</span>(x!=<span class="number">0</span>)<span class="comment">//当x不等于0的时候  </span></span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">if</span> (reverseX&gt;(<span class="number">200</span>)/<span class="number">10</span>)<span class="comment">//判断是否溢出  </span></span><br><span class="line">            &#123;  </span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">else</span>  </span><br><span class="line">            &#123;  </span><br><span class="line">                temp=x%<span class="number">10</span>;  </span><br><span class="line">                reverseX=reverseX*<span class="number">10</span>+temp;  </span><br><span class="line">                x=x/<span class="number">10</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> reverseX*biaozhi;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    Solution s;  </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">100</span>;i&lt;=<span class="number">200</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;s.reverse(i)&lt;&lt;<span class="string">"       "</span>&lt;&lt;s.reverse1(i)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里我把所给的范围缩小为200,希望能从中找到不同<br>输出结果如下<br><img src="https://upload-images.jianshu.io/upload_images/8889168-8a67a49c59002e64.png" alt="image.png"><br>可以明显看出来,当数值为102时不一样的地方出来了,猜想加上这个x%10,是为了避免个别不符合界限的数字出现<br>将范围改为300时我推算当数值为103,203时应该也是不一样的<br>结果如下:<br><img src="https://upload-images.jianshu.io/upload_images/8889168-dbefd760bb052ec3.png" alt="image.png"><br><img src="https://upload-images.jianshu.io/upload_images/8889168-81c3b58302a2f936.png" alt="image.png"><br>验证了我的想法,虽然这个疑问终究没解决,但我似乎有一点想法了,先记住这个表达式,以后有时间我会深入的研究一番.</p><blockquote><p>给定一个 32 位有符号整数，将整数中的数字进行反转。</p></blockquote><blockquote><p>示例 1:<br>输入: 123<br>输出: 321<br>示例 2:<br>输入: -123<br>输出: -321<br>示例 3:<br>输入: 120<br>输出: 21<br>注意:<br>假设我们的环境只能存储 32 位有符号整数，其数值范围是 [−231,  231 − 1]。根据这个假设，如果反转后的整数溢出，则返回 0。</p></blockquote><p><strong>解题的整个过程:</strong><br>在这里说一下我在解决这个问题中遇到的问题,首先我找到了这个代码:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;  </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span>  </span><br><span class="line"><span class="keyword">public</span>:  </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x)</span>  </span></span><br><span class="line"><span class="function">    </span>&#123;  </span><br><span class="line">        <span class="keyword">int</span> reverseX=<span class="number">0</span>;  </span><br><span class="line">        <span class="keyword">int</span> temp;  </span><br><span class="line">        <span class="keyword">int</span> a;  </span><br><span class="line">        <span class="keyword">int</span> biaozhi=<span class="number">1</span>;  </span><br><span class="line">        <span class="keyword">if</span> (x&lt;<span class="number">0</span>)<span class="comment">//如果x小于0，将它变成正的  </span></span><br><span class="line">        &#123;  </span><br><span class="line">            biaozhi=<span class="number">-1</span>;  </span><br><span class="line">            x=<span class="built_in">abs</span>(x);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">while</span>(x!=<span class="number">0</span>)<span class="comment">//当x不等于0的时候  </span></span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">if</span> (reverseX&gt;(INT_MAX-x%<span class="number">10</span>)/<span class="number">10</span>)<span class="comment">//判断是否溢出  </span></span><br><span class="line">            &#123;  </span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">else</span>  </span><br><span class="line">            &#123;  </span><br><span class="line">                temp=x%<span class="number">10</span>;  </span><br><span class="line">                reverseX=reverseX*<span class="number">10</span>+temp;  </span><br><span class="line">                x=x/<span class="number">10</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> reverseX*biaozhi;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    Solution s;  </span><br><span class="line">    <span class="keyword">int</span> i=s.reverse(<span class="number">1534236469</span>);  </span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="built_in">endl</span>;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这个代码中</p><blockquote><p>if (reverseX&gt;(INT_MAX-x%10)/10)//判断是否溢出  </p></blockquote><p>这一句我并没有理解,为此我思考了很久<br>见如下的代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;  </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span>  </span><br><span class="line"><span class="keyword">public</span>:  </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x)</span>  </span></span><br><span class="line"><span class="function">    </span>&#123;  </span><br><span class="line">        <span class="keyword">int</span> reverseX=<span class="number">0</span>;  </span><br><span class="line">        <span class="keyword">int</span> temp;  </span><br><span class="line">        <span class="keyword">int</span> a;  </span><br><span class="line">        <span class="keyword">int</span> biaozhi=<span class="number">1</span>;  </span><br><span class="line">        <span class="keyword">if</span> (x&lt;<span class="number">0</span>)<span class="comment">//如果x小于0，将它变成正的  </span></span><br><span class="line">        &#123;  </span><br><span class="line">            biaozhi=<span class="number">-1</span>;  </span><br><span class="line">            x=<span class="built_in">abs</span>(x);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">while</span>(x!=<span class="number">0</span>)<span class="comment">//当x不等于0的时候  </span></span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">if</span> (reverseX&gt;(<span class="number">200</span>-x%<span class="number">10</span>)/<span class="number">10</span>)<span class="comment">//判断是否溢出  </span></span><br><span class="line">            &#123;  </span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">else</span>  </span><br><span class="line">            &#123;  </span><br><span class="line">                temp=x%<span class="number">10</span>;  </span><br><span class="line">                reverseX=reverseX*<span class="number">10</span>+temp;  </span><br><span class="line">                x=x/<span class="number">10</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> reverseX*biaozhi;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">reverse1</span><span class="params">(<span class="keyword">int</span> x)</span>  </span></span><br><span class="line"><span class="function">    </span>&#123;  </span><br><span class="line">        <span class="keyword">int</span> reverseX=<span class="number">0</span>;  </span><br><span class="line">        <span class="keyword">int</span> temp;  </span><br><span class="line">        <span class="keyword">int</span> a;  </span><br><span class="line">        <span class="keyword">int</span> biaozhi=<span class="number">1</span>;  </span><br><span class="line">        <span class="keyword">if</span> (x&lt;<span class="number">0</span>)<span class="comment">//如果x小于0，将它变成正的  </span></span><br><span class="line">        &#123;  </span><br><span class="line">            biaozhi=<span class="number">-1</span>;  </span><br><span class="line">            x=<span class="built_in">abs</span>(x);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">while</span>(x!=<span class="number">0</span>)<span class="comment">//当x不等于0的时候  </span></span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">if</span> (reverseX&gt;(<span class="number">200</span>)/<span class="number">10</span>)<span class="comment">//判断是否溢出  </span></span><br><span class="line">            &#123;  </span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">else</span>  </span><br><span class="line">            &#123;  </span><br><span class="line">                temp=x%<span class="number">10</span>;  </span><br><span class="line">                reverseX=reverseX*<span class="number">10</span>+temp;  </span><br><span class="line">                x=x/<span class="number">10</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> reverseX*biaozhi;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    Solution s;  </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">100</span>;i&lt;=<span class="number">200</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;s.reverse(i)&lt;&lt;<span class="string">"       "</span>&lt;&lt;s.reverse1(i)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里我把所给的范围缩小为200,希望能从中找到不同<br>输出结果如下<br><img src="https://upload-images.jianshu.io/upload_images/8889168-8a67a49c59002e64.png" alt="image.png"><br>可以明显看出来,当数值为102时不一样的地方出来了,猜想加上这个x%10,是为了避免个别不符合界限的数字出现<br>将范围改为300时我推算当数值为103,203时应该也是不一样的<br>结果如下:<br><img src="https://upload-images.jianshu.io/upload_images/8889168-dbefd760bb052ec3.png" alt="image.png"><br><img src="https://upload-images.jianshu.io/upload_images/8889168-81c3b58302a2f936.png" alt="image.png"><br>验证了我的想法,虽然这个疑问终究没解决,但我似乎有一点想法了,先记住这个表达式,以后有时间我会深入的研究一番.</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;给定一个 32 位有符号整数，将整数中的数字进行反转。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;示例 1:&lt;br&gt;输入: 123&lt;br&gt;输出: 321&lt;br&gt;示例 2:&lt;br&gt;输入: -123&lt;br&gt;输出: -321&lt;br&gt;示例 3:&lt;br&gt;输入: 120&lt;br&gt;输出: 21&lt;br&gt;注意:&lt;br&gt;假设我们的环境只能存储 32 位有符号整数，其数值范围是 [−231,  231 − 1]。根据这个假设，如果反转后的整数溢出，则返回 0。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="题目思路" scheme="http://yoursite.com/tags/%E9%A2%98%E7%9B%AE%E6%80%9D%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode的第7题</title>
    <link href="http://yoursite.com/2019/08/28/algorithm07/"/>
    <id>http://yoursite.com/2019/08/28/algorithm07/</id>
    <published>2019-08-28T00:10:04.000Z</published>
    <updated>2019-08-31T14:52:49.870Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>给定一个 32 位有符号整数，将整数中的数字进行反转。</p></blockquote><blockquote><p>示例 1:<br>输入: 123<br>输出: 321<br>示例 2:<br>输入: -123<br>输出: -321<br>示例 3:<br>输入: 120<br>输出: 21<br>注意:<br>假设我们的环境只能存储 32 位有符号整数，其数值范围是 [−231,  231 − 1]。根据这个假设，如果反转后的整数溢出，则返回 0。</p></blockquote><a id="more"></a><p><strong>解题的整个过程:</strong><br>在这里说一下我在解决这个问题中遇到的问题,首先我找到了这个代码:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;  </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span>  </span><br><span class="line"><span class="keyword">public</span>:  </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x)</span>  </span></span><br><span class="line"><span class="function">    </span>&#123;  </span><br><span class="line">        <span class="keyword">int</span> reverseX=<span class="number">0</span>;  </span><br><span class="line">        <span class="keyword">int</span> temp;  </span><br><span class="line">        <span class="keyword">int</span> a;  </span><br><span class="line">        <span class="keyword">int</span> biaozhi=<span class="number">1</span>;  </span><br><span class="line">        <span class="keyword">if</span> (x&lt;<span class="number">0</span>)<span class="comment">//如果x小于0，将它变成正的  </span></span><br><span class="line">        &#123;  </span><br><span class="line">            biaozhi=<span class="number">-1</span>;  </span><br><span class="line">            x=<span class="built_in">abs</span>(x);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">while</span>(x!=<span class="number">0</span>)<span class="comment">//当x不等于0的时候  </span></span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">if</span> (reverseX&gt;(INT_MAX-x%<span class="number">10</span>)/<span class="number">10</span>)<span class="comment">//判断是否溢出  </span></span><br><span class="line">            &#123;  </span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">else</span>  </span><br><span class="line">            &#123;  </span><br><span class="line">                temp=x%<span class="number">10</span>;  </span><br><span class="line">                reverseX=reverseX*<span class="number">10</span>+temp;  </span><br><span class="line">                x=x/<span class="number">10</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> reverseX*biaozhi;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    Solution s;  </span><br><span class="line">    <span class="keyword">int</span> i=s.reverse(<span class="number">1534236469</span>);  </span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="built_in">endl</span>;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这个代码中</p><blockquote><p>if (reverseX&gt;(INT_MAX-x%10)/10)//判断是否溢出  </p></blockquote><p>这一句我并没有理解,为此我思考了很久<br>见如下的代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;  </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span>  </span><br><span class="line"><span class="keyword">public</span>:  </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x)</span>  </span></span><br><span class="line"><span class="function">    </span>&#123;  </span><br><span class="line">        <span class="keyword">int</span> reverseX=<span class="number">0</span>;  </span><br><span class="line">        <span class="keyword">int</span> temp;  </span><br><span class="line">        <span class="keyword">int</span> a;  </span><br><span class="line">        <span class="keyword">int</span> biaozhi=<span class="number">1</span>;  </span><br><span class="line">        <span class="keyword">if</span> (x&lt;<span class="number">0</span>)<span class="comment">//如果x小于0，将它变成正的  </span></span><br><span class="line">        &#123;  </span><br><span class="line">            biaozhi=<span class="number">-1</span>;  </span><br><span class="line">            x=<span class="built_in">abs</span>(x);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">while</span>(x!=<span class="number">0</span>)<span class="comment">//当x不等于0的时候  </span></span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">if</span> (reverseX&gt;(<span class="number">200</span>-x%<span class="number">10</span>)/<span class="number">10</span>)<span class="comment">//判断是否溢出  </span></span><br><span class="line">            &#123;  </span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">else</span>  </span><br><span class="line">            &#123;  </span><br><span class="line">                temp=x%<span class="number">10</span>;  </span><br><span class="line">                reverseX=reverseX*<span class="number">10</span>+temp;  </span><br><span class="line">                x=x/<span class="number">10</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> reverseX*biaozhi;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">reverse1</span><span class="params">(<span class="keyword">int</span> x)</span>  </span></span><br><span class="line"><span class="function">    </span>&#123;  </span><br><span class="line">        <span class="keyword">int</span> reverseX=<span class="number">0</span>;  </span><br><span class="line">        <span class="keyword">int</span> temp;  </span><br><span class="line">        <span class="keyword">int</span> a;  </span><br><span class="line">        <span class="keyword">int</span> biaozhi=<span class="number">1</span>;  </span><br><span class="line">        <span class="keyword">if</span> (x&lt;<span class="number">0</span>)<span class="comment">//如果x小于0，将它变成正的  </span></span><br><span class="line">        &#123;  </span><br><span class="line">            biaozhi=<span class="number">-1</span>;  </span><br><span class="line">            x=<span class="built_in">abs</span>(x);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">while</span>(x!=<span class="number">0</span>)<span class="comment">//当x不等于0的时候  </span></span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">if</span> (reverseX&gt;(<span class="number">200</span>)/<span class="number">10</span>)<span class="comment">//判断是否溢出  </span></span><br><span class="line">            &#123;  </span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">else</span>  </span><br><span class="line">            &#123;  </span><br><span class="line">                temp=x%<span class="number">10</span>;  </span><br><span class="line">                reverseX=reverseX*<span class="number">10</span>+temp;  </span><br><span class="line">                x=x/<span class="number">10</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> reverseX*biaozhi;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    Solution s;  </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">100</span>;i&lt;=<span class="number">200</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;s.reverse(i)&lt;&lt;<span class="string">"       "</span>&lt;&lt;s.reverse1(i)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里我把所给的范围缩小为200,希望能从中找到不同<br>输出结果如下<br><img src="https://upload-images.jianshu.io/upload_images/8889168-8a67a49c59002e64.png" alt="image.png"><br>可以明显看出来,当数值为102时不一样的地方出来了,猜想加上这个x%10,是为了避免个别不符合界限的数字出现<br>将范围改为300时我推算当数值为103,203时应该也是不一样的<br>结果如下:<br><img src="https://upload-images.jianshu.io/upload_images/8889168-dbefd760bb052ec3.png" alt="image.png"><br><img src="https://upload-images.jianshu.io/upload_images/8889168-81c3b58302a2f936.png" alt="image.png"><br>验证了我的想法,虽然这个疑问终究没解决,但我似乎有一点想法了,先记住这个表达式,以后有时间我会深入的研究一番.</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;给定一个 32 位有符号整数，将整数中的数字进行反转。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;示例 1:&lt;br&gt;输入: 123&lt;br&gt;输出: 321&lt;br&gt;示例 2:&lt;br&gt;输入: -123&lt;br&gt;输出: -321&lt;br&gt;示例 3:&lt;br&gt;输入: 120&lt;br&gt;输出: 21&lt;br&gt;注意:&lt;br&gt;假设我们的环境只能存储 32 位有符号整数，其数值范围是 [−231,  231 − 1]。根据这个假设，如果反转后的整数溢出，则返回 0。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="题目思路" scheme="http://yoursite.com/tags/%E9%A2%98%E7%9B%AE%E6%80%9D%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>malloc函数的理解补充</title>
    <link href="http://yoursite.com/2019/08/28/algorithm06/"/>
    <id>http://yoursite.com/2019/08/28/algorithm06/</id>
    <published>2019-08-28T00:04:59.000Z</published>
    <updated>2019-08-31T13:45:14.803Z</updated>
    
    <content type="html"><![CDATA[<p>先观察以下代码</p><a id="more"></a><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;NODE,*PNODE;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Stack</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    PNODE pTop;</span><br><span class="line">    PNODE pBottom;</span><br><span class="line">&#125;STACK,*PSTACK;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(PSTACK)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    STACK S;</span><br><span class="line">    PSTACK P;</span><br><span class="line">    <span class="comment">//init(&amp;S);</span></span><br><span class="line">    P=&amp;S;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d,%d,%d"</span>,P-&gt;pTop,P-&gt;pBottom,P);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(PSTACK Ps)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Ps-&gt;pTop=(PNODE)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(NODE));</span><br><span class="line">    Ps-&gt;pBottom=(PNODE)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(NODE));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：<br><img src="http://upload-images.jianshu.io/upload_images/8889168-0b4916994a520a13.png" alt="image.png"><br>取消掉init（&amp;S）的注释<br>运行结果如下：<br><img src="http://upload-images.jianshu.io/upload_images/8889168-b6dd8e42dcdf9b1e.png" alt="image.png"><br>可以看到malloc函数为结构体STACK里面的两个指针变量附上了新的值，也就是这个指针指向了一个真正的结构体变量。<br>再将代码修改成这种格式</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;NODE,*PNODE;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Stack</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    PNODE pTop;</span><br><span class="line">    PNODE pBottom;</span><br><span class="line">&#125;STACK,*PSTACK;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(PSTACK)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    STACK S;</span><br><span class="line">    PSTACK P;</span><br><span class="line">    init(&amp;S);</span><br><span class="line">    P=&amp;S;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d,%d,%d"</span>,P-&gt;pTop,P-&gt;pBottom,P);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d,%d,%d"</span>,P-&gt;pTop-&gt;data,P-&gt;pTop-&gt;next,P-&gt;pTop);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d,%d,%d"</span>,P-&gt;pBottom-&gt;data,P-&gt;pBottom-&gt;next,P-&gt;pBottom);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(PSTACK Ps)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Ps-&gt;pTop=(PNODE)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(NODE));</span><br><span class="line">    Ps-&gt;pBottom=(PNODE)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(NODE));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出的结果变成了这样</p><p><img src="http://upload-images.jianshu.io/upload_images/8889168-cdd7a9bdf4ebdf57.png" alt="image.png"><br>STACK结构体里面的两个指针指向的结构体变量里面的值是系统自动分配的值<br>如果将init（&amp;S）注释掉<br><img src="http://upload-images.jianshu.io/upload_images/8889168-2f09ff6f422fcbfd.png" alt="image.png"><br>也就是说我不去给指针分配指向的结构体变量，那想要通过这个指针去访问指针所指向的值是根本不行的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;先观察以下代码&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="概念理解" scheme="http://yoursite.com/tags/%E6%A6%82%E5%BF%B5%E7%90%86%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>malloc函数的理解</title>
    <link href="http://yoursite.com/2019/08/28/algorithm05/"/>
    <id>http://yoursite.com/2019/08/28/algorithm05/</id>
    <published>2019-08-28T00:04:53.000Z</published>
    <updated>2019-08-31T13:45:24.112Z</updated>
    
    <content type="html"><![CDATA[<p>在数据结构里经常会用到malloc函数，但是它的功能我一直都是很模糊的，今天在看数据结构的时候忽然感觉到顿悟，有一些心得和大家分享一下。<br>先分享这样的一段程序.</p><a id="more"></a><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;NODE,*pNode;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pNode Pa;</span><br><span class="line">    pNode Pb=(pNode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(NODE));</span><br><span class="line">    <span class="comment">//printf("%d,%d,%d",Pa,Pa-&gt;data,Pa-&gt;next);</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d,%d,%d"</span>,Pb,Pb-&gt;data,Pb-&gt;next);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序的输出结果是这样的<br><img src="http://upload-images.jianshu.io/upload_images/8889168-81bdc3a117fc102f.png" alt="image.png"><br>如果把第一个printf取消注释的话<br>运行的结果是这样的<br><img src="http://upload-images.jianshu.io/upload_images/8889168-38974a7e7f0e222f.png" alt="image.png"><br>由此可见malloc函数的作用<br>下面说一下我对这个函数的一点理解<br>malloc函数是为指向结构体的指针指向了堆内存里面的一个结构体变量，而这个结构体里面的值是系统自动分配的值。如果没用使用malloc函数，那么仅仅是开辟了一块栈内存空间，并没用一个可以指的结构体变量，换做Java来思考的话就相当于你并没有实例化对象，malloc就是实例化对象的一个过程。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在数据结构里经常会用到malloc函数，但是它的功能我一直都是很模糊的，今天在看数据结构的时候忽然感觉到顿悟，有一些心得和大家分享一下。&lt;br&gt;先分享这样的一段程序.&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="概念理解" scheme="http://yoursite.com/tags/%E6%A6%82%E5%BF%B5%E7%90%86%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>数据结构里简易的栈</title>
    <link href="http://yoursite.com/2019/08/28/algorithm04/"/>
    <id>http://yoursite.com/2019/08/28/algorithm04/</id>
    <published>2019-08-28T00:02:12.000Z</published>
    <updated>2019-08-28T00:14:22.146Z</updated>
    
    <content type="html"><![CDATA[<p>根据所学自己编写了一个栈的结构，正常使用应该是没问题的</p><a id="more"></a><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;NODE,*PNODE;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Stack</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    PNODE pTop;</span><br><span class="line">    PNODE pBottom;</span><br><span class="line">&#125;STACK,*PSTACK;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(PSTACK)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(PSTACK,<span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">travel</span><span class="params">(PSTACK)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isEmpty</span><span class="params">(PSTACK)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">(PSTACK,<span class="keyword">int</span>*)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    STACK S;</span><br><span class="line">    init(&amp;S);</span><br><span class="line">    travel(&amp;S);</span><br><span class="line">    push(&amp;S,<span class="number">1</span>);</span><br><span class="line">    push(&amp;S,<span class="number">2</span>);</span><br><span class="line">    push(&amp;S,<span class="number">3</span>);</span><br><span class="line">    push(&amp;S,<span class="number">4</span>);</span><br><span class="line">    push(&amp;S,<span class="number">5</span>);</span><br><span class="line">    push(&amp;S,<span class="number">6</span>);</span><br><span class="line">    push(&amp;S,<span class="number">7</span>);</span><br><span class="line">    travel(&amp;S);</span><br><span class="line">    pop(&amp;S,&amp;i);</span><br><span class="line">    travel(&amp;S);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,i);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(PSTACK Ps)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Ps-&gt;pTop=(PNODE)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(NODE));</span><br><span class="line">    <span class="keyword">if</span>(Ps-&gt;pTop==<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"内存分配失败"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        Ps-&gt;pBottom=Ps-&gt;pTop;</span><br><span class="line">        Ps-&gt;pTop-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(PSTACK Ps,<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    PNODE pNew=(PNODE)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(NODE));</span><br><span class="line">    <span class="keyword">if</span>(pNew==<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"内存分配失败"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        pNew-&gt;data=val;</span><br><span class="line">        pNew-&gt;next=Ps-&gt;pTop;</span><br><span class="line">        Ps-&gt;pTop=pNew;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isEmpty</span><span class="params">(PSTACK Ps)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Ps-&gt;pTop==Ps-&gt;pBottom)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">travel</span><span class="params">(PSTACK Ps)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(isEmpty(Ps))</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    PNODE q=Ps-&gt;pTop;</span><br><span class="line">    <span class="keyword">while</span>(q!=Ps-&gt;pBottom)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d \n"</span>,q-&gt;data);</span><br><span class="line">        q=q-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">(PSTACK Ps,<span class="keyword">int</span>* val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(isEmpty(Ps))</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    PNODE P=(PNODE)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(NODE));</span><br><span class="line">    P=Ps-&gt;pTop;</span><br><span class="line">    *val=P-&gt;data;</span><br><span class="line">    Ps-&gt;pTop=Ps-&gt;pTop-&gt;next;</span><br><span class="line">    <span class="built_in">free</span>(P);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;根据所学自己编写了一个栈的结构，正常使用应该是没问题的&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="基本数据结构" scheme="http://yoursite.com/tags/%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>数据结构里循环队列</title>
    <link href="http://yoursite.com/2019/08/28/algorithm03/"/>
    <id>http://yoursite.com/2019/08/28/algorithm03/</id>
    <published>2019-08-28T00:02:07.000Z</published>
    <updated>2019-08-28T00:14:26.764Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 10</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Queue</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span>* pBase;<span class="comment">//可以看作数组</span></span><br><span class="line">    <span class="keyword">int</span> front;</span><br><span class="line">    <span class="keyword">int</span> rear;</span><br><span class="line">&#125;QUEUE;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(QUEUE*)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">enQueue</span><span class="params">(QUEUE*,<span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">travel_queue</span><span class="params">(QUEUE*)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">full_queue</span><span class="params">(QUEUE*)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QUEUE Q;</span><br><span class="line">    init(&amp;Q);</span><br><span class="line">    enQueue(&amp;Q,<span class="number">1</span>);</span><br><span class="line">    enQueue(&amp;Q,<span class="number">2</span>);</span><br><span class="line">    enQueue(&amp;Q,<span class="number">3</span>);</span><br><span class="line">    enQueue(&amp;Q,<span class="number">4</span>);</span><br><span class="line">    enQueue(&amp;Q,<span class="number">5</span>);</span><br><span class="line">    enQueue(&amp;Q,<span class="number">6</span>);</span><br><span class="line">    travel_queue(&amp;Q);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(QUEUE *pQ)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pQ-&gt;pBase=(<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span> )*MAX);<span class="comment">//开辟队列且定义长度，长度是MAX</span></span><br><span class="line">    pQ-&gt;front=<span class="number">0</span>;</span><br><span class="line">    pQ-&gt;rear=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">full_queue</span><span class="params">(QUEUE* pQ)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>((pQ-&gt;rear+<span class="number">1</span>)%MAX==pQ-&gt;front)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">enQueue</span><span class="params">(QUEUE* pQ,<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(full_queue(pQ))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        pQ-&gt;pBase[pQ-&gt;rear]=val;</span><br><span class="line">        pQ-&gt;rear=(pQ-&gt;rear+<span class="number">1</span>)%MAX;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">travel_queue</span><span class="params">(QUEUE* pQ)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    i=pQ-&gt;front;</span><br><span class="line">    <span class="keyword">while</span>(i!=pQ-&gt;rear)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d \n"</span>,pQ-&gt;pBase[i]);</span><br><span class="line">        i=(i+<span class="number">1</span>)%MAX;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;li
      
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="基本数据结构" scheme="http://yoursite.com/tags/%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>递归函数的理解</title>
    <link href="http://yoursite.com/2019/08/28/algorithm01/"/>
    <id>http://yoursite.com/2019/08/28/algorithm01/</id>
    <published>2019-08-27T23:59:47.000Z</published>
    <updated>2019-08-28T00:14:28.437Z</updated>
    
    <content type="html"><![CDATA[<p>当一个函数的运行期间调用另一个函数的时候，在运行被调用的函数之前，系统会怎样操作呢：<br><strong>1</strong>．    将所有的实参，以及接下来会用到实参的语句的地址等信息传递给被调用的函数保存<br><strong>2</strong>．    为被调用的函数的局部变量（还有被调函数里的变量）分配存储空间<br><strong>3</strong>．    将控制转移到被调用函数的入口<br>而被调函数结束返回主调函数的之前，系统也是需要做以下的事情：<br><strong>1</strong>．    上一步分配的储存空间全部free掉，但是要保存被调函数的返回结果<br><strong>2</strong>．    依照开始保存的返回地址将控制转移给调用函数。<br>而在多次调用的时候，按照”后调用先返回”的原则。</p><a id="more"></a><p>也就是说，先把调用的函数拿过来，按照栈的形式进行存储然后再进行操作，例如下面代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">A</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">B</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">C</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">A</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    B();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">B</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    C();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">C</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"C"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    A();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>这是一个压栈的过程！</strong><br>在主函数调用A函数的时候，栈顶里存放的就是A函数里的数据，然后A函数又去调用B函数，B函数里的数据就被压进栈中，然后是C函数。当C函数执行完操作的时候，就释放掉其存储空间，然后是B，以此类推，当前运行的函数永远在栈顶。</p><p><strong>而递归就是函数自己去调用自己，流程是和上面的一样的，如果懂了上面的操作，那么递归是很容易去理解的。</strong><br><strong>而且在一个函数调用另一个函数的时候，该函数不会继续执行</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当一个函数的运行期间调用另一个函数的时候，在运行被调用的函数之前，系统会怎样操作呢：&lt;br&gt;&lt;strong&gt;1&lt;/strong&gt;．    将所有的实参，以及接下来会用到实参的语句的地址等信息传递给被调用的函数保存&lt;br&gt;&lt;strong&gt;2&lt;/strong&gt;．    为被调用的函数的局部变量（还有被调函数里的变量）分配存储空间&lt;br&gt;&lt;strong&gt;3&lt;/strong&gt;．    将控制转移到被调用函数的入口&lt;br&gt;而被调函数结束返回主调函数的之前，系统也是需要做以下的事情：&lt;br&gt;&lt;strong&gt;1&lt;/strong&gt;．    上一步分配的储存空间全部free掉，但是要保存被调函数的返回结果&lt;br&gt;&lt;strong&gt;2&lt;/strong&gt;．    依照开始保存的返回地址将控制转移给调用函数。&lt;br&gt;而在多次调用的时候，按照”后调用先返回”的原则。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="概念理解" scheme="http://yoursite.com/tags/%E6%A6%82%E5%BF%B5%E7%90%86%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>关于链表一些有趣的东西</title>
    <link href="http://yoursite.com/2019/08/28/algorithm00/"/>
    <id>http://yoursite.com/2019/08/28/algorithm00/</id>
    <published>2019-08-27T23:58:09.000Z</published>
    <updated>2020-03-22T14:32:45.841Z</updated>
    
    <content type="html"><![CDATA[<p>今天刷题的时候遇见了这个问题</p><blockquote><p>题目出自leetcode  21：合并两个有序链表</p></blockquote><blockquote><p>将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。<br>示例：<br>输入：1-&gt;2-&gt;4, 1-&gt;3-&gt;4<br>输出：1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4</p></blockquote><a id="more"></a><p>我想正好可以借这个机会复习一下数据结构的链表的结构，感觉忘的差不多了。。。首先我写出了一个简易的链表代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;NODE,*pNode;</span><br><span class="line"></span><br><span class="line"><span class="function">pNode <span class="title">CreatList</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">pNode Ps=(pNode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(NODE));</span><br><span class="line">Ps-&gt;data = <span class="number">-1</span>;</span><br><span class="line">Ps-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> Ps;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(pNode Ps,<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">pNode pNew=(pNode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(NODE));</span><br><span class="line">    <span class="keyword">if</span>(pNew==<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"内存分配失败"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(Ps-&gt;next == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">  pNew-&gt;data = val;</span><br><span class="line">Ps-&gt;next = pNew;</span><br><span class="line">pNew-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">    pNode P = Ps;</span><br><span class="line"><span class="keyword">while</span>(P-&gt;next!=<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">P=P-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">pNew-&gt;data = val;</span><br><span class="line">P-&gt;next = pNew;</span><br><span class="line">pNew-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ListPrint</span><span class="params">(pNode Ps)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pNode P = Ps-&gt;next;</span><br><span class="line"><span class="keyword">while</span>(P!=<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,P-&gt;data);</span><br><span class="line">P=P-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">pNode Pa;</span><br><span class="line">Pa = CreatList();</span><br><span class="line">add(Pa,<span class="number">1</span>);</span><br><span class="line">add(Pa,<span class="number">1</span>);</span><br><span class="line">add(Pa,<span class="number">1</span>);</span><br><span class="line">add(Pa,<span class="number">1</span>);</span><br><span class="line">add(Pa,<span class="number">1</span>);</span><br><span class="line">ListPrint(Pa);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不过在运行的时候我发现，不是我期望的那个结果，没有任何的显示，仔细的检查代码之后，我发现在add函数里的最后我加了一句free(P)，我尝试这将它删掉，程序正常的运行了，结果如下：<br><img src="https://upload-images.jianshu.io/upload_images/8889168-774e3bdca9a9e4b6.png" alt="image.png"><br>不过我觉得这是很有意思的事情，我查找了些关于free函数的资料：</p><blockquote><p>void free(void *FirstByte)： 该函数是将之前用malloc分配的空间还给程序或者是操作系统，也就是释放了这块内存，让它重新得到自由。</p></blockquote><p>好像并没有解决我的疑问，我又找到了这个</p><blockquote><p>free()释放的是指针指向的内存！注意！释放的是内存，不是指针！指针并没有被释放，指针仍然指向原来的存储空间。指针是一个变量，只有程序结束时才被销毁。释放了内存空间后，原来指向这块空间的指针还是存在！只不过现在指针指向的内容的垃圾，是未定义的，所以说是垃圾。因此，释放内存后把指针指向NULL，防止指针在后面不小心又被解引用了。</p></blockquote><p>也就是说我在free(P)这一句中，我把P指向的内存空间给释放了，所以程序无法继续的运行。。。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天刷题的时候遇见了这个问题&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;题目出自leetcode  21：合并两个有序链表&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。&lt;br&gt;示例：&lt;br&gt;输入：1-&amp;gt;2-&amp;gt;4, 1-&amp;gt;3-&amp;gt;4&lt;br&gt;输出：1-&amp;gt;1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;4&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="题目思路" scheme="http://yoursite.com/tags/%E9%A2%98%E7%9B%AE%E6%80%9D%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>二叉树的应用—哈夫曼树</title>
    <link href="http://yoursite.com/2019/08/27/datastructure0501/"/>
    <id>http://yoursite.com/2019/08/27/datastructure0501/</id>
    <published>2019-08-27T09:10:54.000Z</published>
    <updated>2019-09-03T11:53:57.820Z</updated>
    
    <content type="html"><![CDATA[<p><strong>带权路径长度</strong></p><ul><li>路径长度：路径上所经历的边的个数</li><li>结点的权：结点被赋予的数值<a id="more"></a></li><li><em>树的带权路径长度*</em>： 树中所有<strong>叶节点</strong>的带权路径之和<br><img src="https://upload-images.jianshu.io/upload_images/8889168-8fce07a38dd34fba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="公式及计算如下"></li></ul><p><strong>哈夫曼树</strong>：也成为最优二叉树，就是含n的带权叶子结点的树之中带权路径长度最小的二叉树。在上面的两个树中第二棵树就是一颗哈夫曼树。</p><p><strong>构造哈夫曼树</strong>，只需按照步骤一步一步来即可<br><strong><em>哈夫曼树在构造的时候没有规定左右子树，所以其不唯一</em></strong><br><img src="https://upload-images.jianshu.io/upload_images/8889168-cb2ad0850ce62b5b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="哈夫曼树的构造方法"></p><p><strong>哈夫曼树的性质</strong><br><img src="https://upload-images.jianshu.io/upload_images/8889168-a3b6358171de5299.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt></p><p><strong>哈夫曼树的应用</strong><br><strong>编码</strong>：对于一个字符串序列，用二进制数来表示每一个字符<br> <img src="https://upload-images.jianshu.io/upload_images/8889168-d0e0e96e73198629.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="固定长度编码"><br><img src="https://upload-images.jianshu.io/upload_images/8889168-d34e95afd649c5f2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="可变长度编码，因为会产生歧义，不可应用"><br>使用哈夫曼树构造的过程如下<br><img src="https://upload-images.jianshu.io/upload_images/8889168-96ab9fae1996ee6d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="字母对应的数字是指字母出现的次数"><br><img src="https://upload-images.jianshu.io/upload_images/8889168-2876e03395bc6904.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="按照规则构造出来的哈夫曼树，左0，右1"><br><strong>这样构造出来的编码不会产生歧义，且长度变短了</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;带权路径长度&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;路径长度：路径上所经历的边的个数&lt;/li&gt;
&lt;li&gt;结点的权：结点被赋予的数值
    
    </summary>
    
    
      <category term="874数据结构复习" scheme="http://yoursite.com/categories/874%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/"/>
    
    
      <category term="树" scheme="http://yoursite.com/tags/%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>二叉树的应用—平衡二叉树</title>
    <link href="http://yoursite.com/2019/08/27/datastructure05/"/>
    <id>http://yoursite.com/2019/08/27/datastructure05/</id>
    <published>2019-08-27T09:08:54.000Z</published>
    <updated>2019-09-03T11:48:32.797Z</updated>
    
    <content type="html"><![CDATA[<p>平衡二叉树：AVL，在<strong>任意结点</strong>的平衡因子的绝对值不超过一。<br>平衡因子：左子树高度减去右子树高度</p><a id="more"></a><ul><li><p>计算高度为h的最小平衡二叉树的节点数Nh<br><img src="https://upload-images.jianshu.io/upload_images/8889168-a2f4ab6baaf7b3c7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="递推规律"></p></li><li><p>平衡二叉树的判断<br>代码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Judge_AVL</span><span class="params">(BiTree bt,<span class="keyword">int</span> &amp;Balance,<span class="keyword">int</span> &amp;h)</span></span>&#123;</span><br><span class="line"><span class="comment">//使用引用类型是因为要修改值的原因</span></span><br><span class="line"><span class="keyword">int</span> bl=<span class="number">0</span>,br=<span class="number">0</span>,hl=<span class="number">0</span>,hr=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (bt == <span class="literal">NULL</span>)&#123;</span><br><span class="line">h = <span class="number">0</span>;</span><br><span class="line">Balance = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (bt-&gt;lchild == <span class="literal">NULL</span>&amp;&amp;bt-&gt;rchild == <span class="literal">NULL</span>)&#123;</span><br><span class="line">h = <span class="number">1</span>;</span><br><span class="line">Balance = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">Judge_AVL(bt-&gt;lchild,bl,hl);</span><br><span class="line">Judge_AVL(bt-&gt;rchild,br,hr);</span><br><span class="line"><span class="keyword">if</span> (hl &gt; hr)&#123;<span class="comment">//判断那个高，选哪个做整个树的高度</span></span><br><span class="line">h = hl+<span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">h = hr+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">abs</span>(hr-hl) &lt; <span class="number">2</span>&amp;&amp;bl = <span class="number">1</span>&amp;&amp;br = <span class="number">1</span>)&#123;</span><br><span class="line"><span class="comment">//根结点平衡，以及左右子树均平衡</span></span><br><span class="line">Balance = <span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span></span><br><span class="line">Balance = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>平衡二叉树的插入</strong><br>基本的思想是先插入，后调整，<strong>注意每次调整一定要是最小不平衡子树方可</strong></p></li><li><p><strong>图解很好理解，多看几遍就好*</strong></p></li></ul><p><strong>方法1  LL平衡旋转（右单旋转）</strong><br>在结点A的左孩子的左子树上插入新节点（左子树的左右结点都可以，不受影响）<br>让B结点上去，B的右结点更改为A，B真正的有节点改为A的左结点，因为B本身是A的左结点<br><img src="https://upload-images.jianshu.io/upload_images/8889168-3d9560e6035dc8a0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="右单旋转图解"><br><img src="https://upload-images.jianshu.io/upload_images/8889168-d25a929e09b05de5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="例"></p><p><strong>方法2 RR平衡旋转（左单旋转）</strong><br>在结点A的右孩子的右子树上插入新节点（右子树的左右结点都可以，不受影响）<br> 跟右旋一致，可以先变化为方法1的树，操作结束后再变换为原树。<br><img src="https://upload-images.jianshu.io/upload_images/8889168-36eeb14a17988f46.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="左单旋转图解"><br><img src="https://upload-images.jianshu.io/upload_images/8889168-27fa3fe8ae90b6f8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="例"></p><p><strong>方法3 LR平衡旋转（先左后右双旋转）</strong><br>在结点A的左孩子的右子树插入了新的结点<br><img src="https://upload-images.jianshu.io/upload_images/8889168-8c888915fa3c0260.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="先左后右双旋转"></p><p><img src="https://upload-images.jianshu.io/upload_images/8889168-0e9832ac9b04e25a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="例"></p><p><strong>方法4 RL平衡旋转（先右后左双旋转）</strong><br>在在结点A的右孩子的左子树插入了新的结点<br><img src="https://upload-images.jianshu.io/upload_images/8889168-66fa1bf9399fb8a8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="先右后左双旋转"><br><img src="https://upload-images.jianshu.io/upload_images/8889168-05454295073c1bce.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="例"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;平衡二叉树：AVL，在&lt;strong&gt;任意结点&lt;/strong&gt;的平衡因子的绝对值不超过一。&lt;br&gt;平衡因子：左子树高度减去右子树高度&lt;/p&gt;
    
    </summary>
    
    
      <category term="874数据结构复习" scheme="http://yoursite.com/categories/874%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/"/>
    
    
      <category term="树" scheme="http://yoursite.com/tags/%E6%A0%91/"/>
    
  </entry>
  
</feed>
