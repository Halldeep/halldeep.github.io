<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>风拂流苏亦浩然</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-08-31T14:52:50.777Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>L1nxi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LeetCode的第14题</title>
    <link href="http://yoursite.com/2019/08/28/algorithm08/"/>
    <id>http://yoursite.com/2019/08/28/algorithm08/</id>
    <published>2019-08-28T00:10:08.000Z</published>
    <updated>2019-08-31T14:52:50.777Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>给定一个 32 位有符号整数，将整数中的数字进行反转。</p></blockquote><blockquote><p>示例 1:<br>输入: 123<br>输出: 321<br>示例 2:<br>输入: -123<br>输出: -321<br>示例 3:<br>输入: 120<br>输出: 21<br>注意:<br>假设我们的环境只能存储 32 位有符号整数，其数值范围是 [−231,  231 − 1]。根据这个假设，如果反转后的整数溢出，则返回 0。</p></blockquote><a id="more"></a><p><strong>解题的整个过程:</strong><br>在这里说一下我在解决这个问题中遇到的问题,首先我找到了这个代码:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;  </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span>  </span><br><span class="line"><span class="keyword">public</span>:  </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x)</span>  </span></span><br><span class="line"><span class="function">    </span>&#123;  </span><br><span class="line">        <span class="keyword">int</span> reverseX=<span class="number">0</span>;  </span><br><span class="line">        <span class="keyword">int</span> temp;  </span><br><span class="line">        <span class="keyword">int</span> a;  </span><br><span class="line">        <span class="keyword">int</span> biaozhi=<span class="number">1</span>;  </span><br><span class="line">        <span class="keyword">if</span> (x&lt;<span class="number">0</span>)<span class="comment">//如果x小于0，将它变成正的  </span></span><br><span class="line">        &#123;  </span><br><span class="line">            biaozhi=<span class="number">-1</span>;  </span><br><span class="line">            x=<span class="built_in">abs</span>(x);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">while</span>(x!=<span class="number">0</span>)<span class="comment">//当x不等于0的时候  </span></span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">if</span> (reverseX&gt;(INT_MAX-x%<span class="number">10</span>)/<span class="number">10</span>)<span class="comment">//判断是否溢出  </span></span><br><span class="line">            &#123;  </span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">else</span>  </span><br><span class="line">            &#123;  </span><br><span class="line">                temp=x%<span class="number">10</span>;  </span><br><span class="line">                reverseX=reverseX*<span class="number">10</span>+temp;  </span><br><span class="line">                x=x/<span class="number">10</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> reverseX*biaozhi;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    Solution s;  </span><br><span class="line">    <span class="keyword">int</span> i=s.reverse(<span class="number">1534236469</span>);  </span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="built_in">endl</span>;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这个代码中</p><blockquote><p>if (reverseX&gt;(INT_MAX-x%10)/10)//判断是否溢出  </p></blockquote><p>这一句我并没有理解,为此我思考了很久<br>见如下的代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;  </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span>  </span><br><span class="line"><span class="keyword">public</span>:  </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x)</span>  </span></span><br><span class="line"><span class="function">    </span>&#123;  </span><br><span class="line">        <span class="keyword">int</span> reverseX=<span class="number">0</span>;  </span><br><span class="line">        <span class="keyword">int</span> temp;  </span><br><span class="line">        <span class="keyword">int</span> a;  </span><br><span class="line">        <span class="keyword">int</span> biaozhi=<span class="number">1</span>;  </span><br><span class="line">        <span class="keyword">if</span> (x&lt;<span class="number">0</span>)<span class="comment">//如果x小于0，将它变成正的  </span></span><br><span class="line">        &#123;  </span><br><span class="line">            biaozhi=<span class="number">-1</span>;  </span><br><span class="line">            x=<span class="built_in">abs</span>(x);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">while</span>(x!=<span class="number">0</span>)<span class="comment">//当x不等于0的时候  </span></span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">if</span> (reverseX&gt;(<span class="number">200</span>-x%<span class="number">10</span>)/<span class="number">10</span>)<span class="comment">//判断是否溢出  </span></span><br><span class="line">            &#123;  </span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">else</span>  </span><br><span class="line">            &#123;  </span><br><span class="line">                temp=x%<span class="number">10</span>;  </span><br><span class="line">                reverseX=reverseX*<span class="number">10</span>+temp;  </span><br><span class="line">                x=x/<span class="number">10</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> reverseX*biaozhi;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">reverse1</span><span class="params">(<span class="keyword">int</span> x)</span>  </span></span><br><span class="line"><span class="function">    </span>&#123;  </span><br><span class="line">        <span class="keyword">int</span> reverseX=<span class="number">0</span>;  </span><br><span class="line">        <span class="keyword">int</span> temp;  </span><br><span class="line">        <span class="keyword">int</span> a;  </span><br><span class="line">        <span class="keyword">int</span> biaozhi=<span class="number">1</span>;  </span><br><span class="line">        <span class="keyword">if</span> (x&lt;<span class="number">0</span>)<span class="comment">//如果x小于0，将它变成正的  </span></span><br><span class="line">        &#123;  </span><br><span class="line">            biaozhi=<span class="number">-1</span>;  </span><br><span class="line">            x=<span class="built_in">abs</span>(x);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">while</span>(x!=<span class="number">0</span>)<span class="comment">//当x不等于0的时候  </span></span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">if</span> (reverseX&gt;(<span class="number">200</span>)/<span class="number">10</span>)<span class="comment">//判断是否溢出  </span></span><br><span class="line">            &#123;  </span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">else</span>  </span><br><span class="line">            &#123;  </span><br><span class="line">                temp=x%<span class="number">10</span>;  </span><br><span class="line">                reverseX=reverseX*<span class="number">10</span>+temp;  </span><br><span class="line">                x=x/<span class="number">10</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> reverseX*biaozhi;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    Solution s;  </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">100</span>;i&lt;=<span class="number">200</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;s.reverse(i)&lt;&lt;<span class="string">"       "</span>&lt;&lt;s.reverse1(i)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里我把所给的范围缩小为200,希望能从中找到不同<br>输出结果如下<br><img src="https://upload-images.jianshu.io/upload_images/8889168-8a67a49c59002e64.png" alt="image.png"><br>可以明显看出来,当数值为102时不一样的地方出来了,猜想加上这个x%10,是为了避免个别不符合界限的数字出现<br>将范围改为300时我推算当数值为103,203时应该也是不一样的<br>结果如下:<br><img src="https://upload-images.jianshu.io/upload_images/8889168-dbefd760bb052ec3.png" alt="image.png"><br><img src="https://upload-images.jianshu.io/upload_images/8889168-81c3b58302a2f936.png" alt="image.png"><br>验证了我的想法,虽然这个疑问终究没解决,但我似乎有一点想法了,先记住这个表达式,以后有时间我会深入的研究一番.</p><blockquote><p>给定一个 32 位有符号整数，将整数中的数字进行反转。</p></blockquote><blockquote><p>示例 1:<br>输入: 123<br>输出: 321<br>示例 2:<br>输入: -123<br>输出: -321<br>示例 3:<br>输入: 120<br>输出: 21<br>注意:<br>假设我们的环境只能存储 32 位有符号整数，其数值范围是 [−231,  231 − 1]。根据这个假设，如果反转后的整数溢出，则返回 0。</p></blockquote><p><strong>解题的整个过程:</strong><br>在这里说一下我在解决这个问题中遇到的问题,首先我找到了这个代码:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;  </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span>  </span><br><span class="line"><span class="keyword">public</span>:  </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x)</span>  </span></span><br><span class="line"><span class="function">    </span>&#123;  </span><br><span class="line">        <span class="keyword">int</span> reverseX=<span class="number">0</span>;  </span><br><span class="line">        <span class="keyword">int</span> temp;  </span><br><span class="line">        <span class="keyword">int</span> a;  </span><br><span class="line">        <span class="keyword">int</span> biaozhi=<span class="number">1</span>;  </span><br><span class="line">        <span class="keyword">if</span> (x&lt;<span class="number">0</span>)<span class="comment">//如果x小于0，将它变成正的  </span></span><br><span class="line">        &#123;  </span><br><span class="line">            biaozhi=<span class="number">-1</span>;  </span><br><span class="line">            x=<span class="built_in">abs</span>(x);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">while</span>(x!=<span class="number">0</span>)<span class="comment">//当x不等于0的时候  </span></span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">if</span> (reverseX&gt;(INT_MAX-x%<span class="number">10</span>)/<span class="number">10</span>)<span class="comment">//判断是否溢出  </span></span><br><span class="line">            &#123;  </span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">else</span>  </span><br><span class="line">            &#123;  </span><br><span class="line">                temp=x%<span class="number">10</span>;  </span><br><span class="line">                reverseX=reverseX*<span class="number">10</span>+temp;  </span><br><span class="line">                x=x/<span class="number">10</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> reverseX*biaozhi;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    Solution s;  </span><br><span class="line">    <span class="keyword">int</span> i=s.reverse(<span class="number">1534236469</span>);  </span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="built_in">endl</span>;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这个代码中</p><blockquote><p>if (reverseX&gt;(INT_MAX-x%10)/10)//判断是否溢出  </p></blockquote><p>这一句我并没有理解,为此我思考了很久<br>见如下的代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;  </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span>  </span><br><span class="line"><span class="keyword">public</span>:  </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x)</span>  </span></span><br><span class="line"><span class="function">    </span>&#123;  </span><br><span class="line">        <span class="keyword">int</span> reverseX=<span class="number">0</span>;  </span><br><span class="line">        <span class="keyword">int</span> temp;  </span><br><span class="line">        <span class="keyword">int</span> a;  </span><br><span class="line">        <span class="keyword">int</span> biaozhi=<span class="number">1</span>;  </span><br><span class="line">        <span class="keyword">if</span> (x&lt;<span class="number">0</span>)<span class="comment">//如果x小于0，将它变成正的  </span></span><br><span class="line">        &#123;  </span><br><span class="line">            biaozhi=<span class="number">-1</span>;  </span><br><span class="line">            x=<span class="built_in">abs</span>(x);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">while</span>(x!=<span class="number">0</span>)<span class="comment">//当x不等于0的时候  </span></span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">if</span> (reverseX&gt;(<span class="number">200</span>-x%<span class="number">10</span>)/<span class="number">10</span>)<span class="comment">//判断是否溢出  </span></span><br><span class="line">            &#123;  </span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">else</span>  </span><br><span class="line">            &#123;  </span><br><span class="line">                temp=x%<span class="number">10</span>;  </span><br><span class="line">                reverseX=reverseX*<span class="number">10</span>+temp;  </span><br><span class="line">                x=x/<span class="number">10</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> reverseX*biaozhi;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">reverse1</span><span class="params">(<span class="keyword">int</span> x)</span>  </span></span><br><span class="line"><span class="function">    </span>&#123;  </span><br><span class="line">        <span class="keyword">int</span> reverseX=<span class="number">0</span>;  </span><br><span class="line">        <span class="keyword">int</span> temp;  </span><br><span class="line">        <span class="keyword">int</span> a;  </span><br><span class="line">        <span class="keyword">int</span> biaozhi=<span class="number">1</span>;  </span><br><span class="line">        <span class="keyword">if</span> (x&lt;<span class="number">0</span>)<span class="comment">//如果x小于0，将它变成正的  </span></span><br><span class="line">        &#123;  </span><br><span class="line">            biaozhi=<span class="number">-1</span>;  </span><br><span class="line">            x=<span class="built_in">abs</span>(x);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">while</span>(x!=<span class="number">0</span>)<span class="comment">//当x不等于0的时候  </span></span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">if</span> (reverseX&gt;(<span class="number">200</span>)/<span class="number">10</span>)<span class="comment">//判断是否溢出  </span></span><br><span class="line">            &#123;  </span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">else</span>  </span><br><span class="line">            &#123;  </span><br><span class="line">                temp=x%<span class="number">10</span>;  </span><br><span class="line">                reverseX=reverseX*<span class="number">10</span>+temp;  </span><br><span class="line">                x=x/<span class="number">10</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> reverseX*biaozhi;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    Solution s;  </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">100</span>;i&lt;=<span class="number">200</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;s.reverse(i)&lt;&lt;<span class="string">"       "</span>&lt;&lt;s.reverse1(i)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里我把所给的范围缩小为200,希望能从中找到不同<br>输出结果如下<br><img src="https://upload-images.jianshu.io/upload_images/8889168-8a67a49c59002e64.png" alt="image.png"><br>可以明显看出来,当数值为102时不一样的地方出来了,猜想加上这个x%10,是为了避免个别不符合界限的数字出现<br>将范围改为300时我推算当数值为103,203时应该也是不一样的<br>结果如下:<br><img src="https://upload-images.jianshu.io/upload_images/8889168-dbefd760bb052ec3.png" alt="image.png"><br><img src="https://upload-images.jianshu.io/upload_images/8889168-81c3b58302a2f936.png" alt="image.png"><br>验证了我的想法,虽然这个疑问终究没解决,但我似乎有一点想法了,先记住这个表达式,以后有时间我会深入的研究一番.</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;给定一个 32 位有符号整数，将整数中的数字进行反转。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;示例 1:&lt;br&gt;输入: 123&lt;br&gt;输出: 321&lt;br&gt;示例 2:&lt;br&gt;输入: -123&lt;br&gt;输出: -321&lt;br&gt;示例 3:&lt;br&gt;输入: 120&lt;br&gt;输出: 21&lt;br&gt;注意:&lt;br&gt;假设我们的环境只能存储 32 位有符号整数，其数值范围是 [−231,  231 − 1]。根据这个假设，如果反转后的整数溢出，则返回 0。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="题目思路" scheme="http://yoursite.com/tags/%E9%A2%98%E7%9B%AE%E6%80%9D%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode的第7题</title>
    <link href="http://yoursite.com/2019/08/28/algorithm07/"/>
    <id>http://yoursite.com/2019/08/28/algorithm07/</id>
    <published>2019-08-28T00:10:04.000Z</published>
    <updated>2019-08-31T14:52:49.870Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>给定一个 32 位有符号整数，将整数中的数字进行反转。</p></blockquote><blockquote><p>示例 1:<br>输入: 123<br>输出: 321<br>示例 2:<br>输入: -123<br>输出: -321<br>示例 3:<br>输入: 120<br>输出: 21<br>注意:<br>假设我们的环境只能存储 32 位有符号整数，其数值范围是 [−231,  231 − 1]。根据这个假设，如果反转后的整数溢出，则返回 0。</p></blockquote><a id="more"></a><p><strong>解题的整个过程:</strong><br>在这里说一下我在解决这个问题中遇到的问题,首先我找到了这个代码:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;  </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span>  </span><br><span class="line"><span class="keyword">public</span>:  </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x)</span>  </span></span><br><span class="line"><span class="function">    </span>&#123;  </span><br><span class="line">        <span class="keyword">int</span> reverseX=<span class="number">0</span>;  </span><br><span class="line">        <span class="keyword">int</span> temp;  </span><br><span class="line">        <span class="keyword">int</span> a;  </span><br><span class="line">        <span class="keyword">int</span> biaozhi=<span class="number">1</span>;  </span><br><span class="line">        <span class="keyword">if</span> (x&lt;<span class="number">0</span>)<span class="comment">//如果x小于0，将它变成正的  </span></span><br><span class="line">        &#123;  </span><br><span class="line">            biaozhi=<span class="number">-1</span>;  </span><br><span class="line">            x=<span class="built_in">abs</span>(x);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">while</span>(x!=<span class="number">0</span>)<span class="comment">//当x不等于0的时候  </span></span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">if</span> (reverseX&gt;(INT_MAX-x%<span class="number">10</span>)/<span class="number">10</span>)<span class="comment">//判断是否溢出  </span></span><br><span class="line">            &#123;  </span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">else</span>  </span><br><span class="line">            &#123;  </span><br><span class="line">                temp=x%<span class="number">10</span>;  </span><br><span class="line">                reverseX=reverseX*<span class="number">10</span>+temp;  </span><br><span class="line">                x=x/<span class="number">10</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> reverseX*biaozhi;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    Solution s;  </span><br><span class="line">    <span class="keyword">int</span> i=s.reverse(<span class="number">1534236469</span>);  </span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="built_in">endl</span>;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这个代码中</p><blockquote><p>if (reverseX&gt;(INT_MAX-x%10)/10)//判断是否溢出  </p></blockquote><p>这一句我并没有理解,为此我思考了很久<br>见如下的代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;  </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span>  </span><br><span class="line"><span class="keyword">public</span>:  </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x)</span>  </span></span><br><span class="line"><span class="function">    </span>&#123;  </span><br><span class="line">        <span class="keyword">int</span> reverseX=<span class="number">0</span>;  </span><br><span class="line">        <span class="keyword">int</span> temp;  </span><br><span class="line">        <span class="keyword">int</span> a;  </span><br><span class="line">        <span class="keyword">int</span> biaozhi=<span class="number">1</span>;  </span><br><span class="line">        <span class="keyword">if</span> (x&lt;<span class="number">0</span>)<span class="comment">//如果x小于0，将它变成正的  </span></span><br><span class="line">        &#123;  </span><br><span class="line">            biaozhi=<span class="number">-1</span>;  </span><br><span class="line">            x=<span class="built_in">abs</span>(x);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">while</span>(x!=<span class="number">0</span>)<span class="comment">//当x不等于0的时候  </span></span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">if</span> (reverseX&gt;(<span class="number">200</span>-x%<span class="number">10</span>)/<span class="number">10</span>)<span class="comment">//判断是否溢出  </span></span><br><span class="line">            &#123;  </span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">else</span>  </span><br><span class="line">            &#123;  </span><br><span class="line">                temp=x%<span class="number">10</span>;  </span><br><span class="line">                reverseX=reverseX*<span class="number">10</span>+temp;  </span><br><span class="line">                x=x/<span class="number">10</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> reverseX*biaozhi;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">reverse1</span><span class="params">(<span class="keyword">int</span> x)</span>  </span></span><br><span class="line"><span class="function">    </span>&#123;  </span><br><span class="line">        <span class="keyword">int</span> reverseX=<span class="number">0</span>;  </span><br><span class="line">        <span class="keyword">int</span> temp;  </span><br><span class="line">        <span class="keyword">int</span> a;  </span><br><span class="line">        <span class="keyword">int</span> biaozhi=<span class="number">1</span>;  </span><br><span class="line">        <span class="keyword">if</span> (x&lt;<span class="number">0</span>)<span class="comment">//如果x小于0，将它变成正的  </span></span><br><span class="line">        &#123;  </span><br><span class="line">            biaozhi=<span class="number">-1</span>;  </span><br><span class="line">            x=<span class="built_in">abs</span>(x);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">while</span>(x!=<span class="number">0</span>)<span class="comment">//当x不等于0的时候  </span></span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">if</span> (reverseX&gt;(<span class="number">200</span>)/<span class="number">10</span>)<span class="comment">//判断是否溢出  </span></span><br><span class="line">            &#123;  </span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">else</span>  </span><br><span class="line">            &#123;  </span><br><span class="line">                temp=x%<span class="number">10</span>;  </span><br><span class="line">                reverseX=reverseX*<span class="number">10</span>+temp;  </span><br><span class="line">                x=x/<span class="number">10</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> reverseX*biaozhi;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    Solution s;  </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">100</span>;i&lt;=<span class="number">200</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;s.reverse(i)&lt;&lt;<span class="string">"       "</span>&lt;&lt;s.reverse1(i)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里我把所给的范围缩小为200,希望能从中找到不同<br>输出结果如下<br><img src="https://upload-images.jianshu.io/upload_images/8889168-8a67a49c59002e64.png" alt="image.png"><br>可以明显看出来,当数值为102时不一样的地方出来了,猜想加上这个x%10,是为了避免个别不符合界限的数字出现<br>将范围改为300时我推算当数值为103,203时应该也是不一样的<br>结果如下:<br><img src="https://upload-images.jianshu.io/upload_images/8889168-dbefd760bb052ec3.png" alt="image.png"><br><img src="https://upload-images.jianshu.io/upload_images/8889168-81c3b58302a2f936.png" alt="image.png"><br>验证了我的想法,虽然这个疑问终究没解决,但我似乎有一点想法了,先记住这个表达式,以后有时间我会深入的研究一番.</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;给定一个 32 位有符号整数，将整数中的数字进行反转。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;示例 1:&lt;br&gt;输入: 123&lt;br&gt;输出: 321&lt;br&gt;示例 2:&lt;br&gt;输入: -123&lt;br&gt;输出: -321&lt;br&gt;示例 3:&lt;br&gt;输入: 120&lt;br&gt;输出: 21&lt;br&gt;注意:&lt;br&gt;假设我们的环境只能存储 32 位有符号整数，其数值范围是 [−231,  231 − 1]。根据这个假设，如果反转后的整数溢出，则返回 0。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="题目思路" scheme="http://yoursite.com/tags/%E9%A2%98%E7%9B%AE%E6%80%9D%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>malloc函数的理解补充</title>
    <link href="http://yoursite.com/2019/08/28/algorithm06/"/>
    <id>http://yoursite.com/2019/08/28/algorithm06/</id>
    <published>2019-08-28T00:04:59.000Z</published>
    <updated>2019-08-31T13:45:14.803Z</updated>
    
    <content type="html"><![CDATA[<p>先观察以下代码</p><a id="more"></a><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;NODE,*PNODE;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Stack</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    PNODE pTop;</span><br><span class="line">    PNODE pBottom;</span><br><span class="line">&#125;STACK,*PSTACK;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(PSTACK)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    STACK S;</span><br><span class="line">    PSTACK P;</span><br><span class="line">    <span class="comment">//init(&amp;S);</span></span><br><span class="line">    P=&amp;S;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d,%d,%d"</span>,P-&gt;pTop,P-&gt;pBottom,P);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(PSTACK Ps)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Ps-&gt;pTop=(PNODE)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(NODE));</span><br><span class="line">    Ps-&gt;pBottom=(PNODE)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(NODE));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：<br><img src="http://upload-images.jianshu.io/upload_images/8889168-0b4916994a520a13.png" alt="image.png"><br>取消掉init（&amp;S）的注释<br>运行结果如下：<br><img src="http://upload-images.jianshu.io/upload_images/8889168-b6dd8e42dcdf9b1e.png" alt="image.png"><br>可以看到malloc函数为结构体STACK里面的两个指针变量附上了新的值，也就是这个指针指向了一个真正的结构体变量。<br>再将代码修改成这种格式</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;NODE,*PNODE;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Stack</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    PNODE pTop;</span><br><span class="line">    PNODE pBottom;</span><br><span class="line">&#125;STACK,*PSTACK;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(PSTACK)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    STACK S;</span><br><span class="line">    PSTACK P;</span><br><span class="line">    init(&amp;S);</span><br><span class="line">    P=&amp;S;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d,%d,%d"</span>,P-&gt;pTop,P-&gt;pBottom,P);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d,%d,%d"</span>,P-&gt;pTop-&gt;data,P-&gt;pTop-&gt;next,P-&gt;pTop);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d,%d,%d"</span>,P-&gt;pBottom-&gt;data,P-&gt;pBottom-&gt;next,P-&gt;pBottom);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(PSTACK Ps)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Ps-&gt;pTop=(PNODE)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(NODE));</span><br><span class="line">    Ps-&gt;pBottom=(PNODE)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(NODE));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出的结果变成了这样</p><p><img src="http://upload-images.jianshu.io/upload_images/8889168-cdd7a9bdf4ebdf57.png" alt="image.png"><br>STACK结构体里面的两个指针指向的结构体变量里面的值是系统自动分配的值<br>如果将init（&amp;S）注释掉<br><img src="http://upload-images.jianshu.io/upload_images/8889168-2f09ff6f422fcbfd.png" alt="image.png"><br>也就是说我不去给指针分配指向的结构体变量，那想要通过这个指针去访问指针所指向的值是根本不行的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;先观察以下代码&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="概念理解" scheme="http://yoursite.com/tags/%E6%A6%82%E5%BF%B5%E7%90%86%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>malloc函数的理解</title>
    <link href="http://yoursite.com/2019/08/28/algorithm05/"/>
    <id>http://yoursite.com/2019/08/28/algorithm05/</id>
    <published>2019-08-28T00:04:53.000Z</published>
    <updated>2019-08-31T13:45:24.112Z</updated>
    
    <content type="html"><![CDATA[<p>在数据结构里经常会用到malloc函数，但是它的功能我一直都是很模糊的，今天在看数据结构的时候忽然感觉到顿悟，有一些心得和大家分享一下。<br>先分享这样的一段程序.</p><a id="more"></a><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;NODE,*pNode;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pNode Pa;</span><br><span class="line">    pNode Pb=(pNode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(NODE));</span><br><span class="line">    <span class="comment">//printf("%d,%d,%d",Pa,Pa-&gt;data,Pa-&gt;next);</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d,%d,%d"</span>,Pb,Pb-&gt;data,Pb-&gt;next);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序的输出结果是这样的<br><img src="http://upload-images.jianshu.io/upload_images/8889168-81bdc3a117fc102f.png" alt="image.png"><br>如果把第一个printf取消注释的话<br>运行的结果是这样的<br><img src="http://upload-images.jianshu.io/upload_images/8889168-38974a7e7f0e222f.png" alt="image.png"><br>由此可见malloc函数的作用<br>下面说一下我对这个函数的一点理解<br>malloc函数是为指向结构体的指针指向了堆内存里面的一个结构体变量，而这个结构体里面的值是系统自动分配的值。如果没用使用malloc函数，那么仅仅是开辟了一块栈内存空间，并没用一个可以指的结构体变量，换做Java来思考的话就相当于你并没有实例化对象，malloc就是实例化对象的一个过程。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在数据结构里经常会用到malloc函数，但是它的功能我一直都是很模糊的，今天在看数据结构的时候忽然感觉到顿悟，有一些心得和大家分享一下。&lt;br&gt;先分享这样的一段程序.&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="概念理解" scheme="http://yoursite.com/tags/%E6%A6%82%E5%BF%B5%E7%90%86%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>数据结构里简易的栈</title>
    <link href="http://yoursite.com/2019/08/28/algorithm04/"/>
    <id>http://yoursite.com/2019/08/28/algorithm04/</id>
    <published>2019-08-28T00:02:12.000Z</published>
    <updated>2019-08-28T00:14:22.146Z</updated>
    
    <content type="html"><![CDATA[<p>根据所学自己编写了一个栈的结构，正常使用应该是没问题的</p><a id="more"></a><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;NODE,*PNODE;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Stack</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    PNODE pTop;</span><br><span class="line">    PNODE pBottom;</span><br><span class="line">&#125;STACK,*PSTACK;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(PSTACK)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(PSTACK,<span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">travel</span><span class="params">(PSTACK)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isEmpty</span><span class="params">(PSTACK)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">(PSTACK,<span class="keyword">int</span>*)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    STACK S;</span><br><span class="line">    init(&amp;S);</span><br><span class="line">    travel(&amp;S);</span><br><span class="line">    push(&amp;S,<span class="number">1</span>);</span><br><span class="line">    push(&amp;S,<span class="number">2</span>);</span><br><span class="line">    push(&amp;S,<span class="number">3</span>);</span><br><span class="line">    push(&amp;S,<span class="number">4</span>);</span><br><span class="line">    push(&amp;S,<span class="number">5</span>);</span><br><span class="line">    push(&amp;S,<span class="number">6</span>);</span><br><span class="line">    push(&amp;S,<span class="number">7</span>);</span><br><span class="line">    travel(&amp;S);</span><br><span class="line">    pop(&amp;S,&amp;i);</span><br><span class="line">    travel(&amp;S);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,i);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(PSTACK Ps)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Ps-&gt;pTop=(PNODE)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(NODE));</span><br><span class="line">    <span class="keyword">if</span>(Ps-&gt;pTop==<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"内存分配失败"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        Ps-&gt;pBottom=Ps-&gt;pTop;</span><br><span class="line">        Ps-&gt;pTop-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(PSTACK Ps,<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    PNODE pNew=(PNODE)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(NODE));</span><br><span class="line">    <span class="keyword">if</span>(pNew==<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"内存分配失败"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        pNew-&gt;data=val;</span><br><span class="line">        pNew-&gt;next=Ps-&gt;pTop;</span><br><span class="line">        Ps-&gt;pTop=pNew;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isEmpty</span><span class="params">(PSTACK Ps)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Ps-&gt;pTop==Ps-&gt;pBottom)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">travel</span><span class="params">(PSTACK Ps)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(isEmpty(Ps))</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    PNODE q=Ps-&gt;pTop;</span><br><span class="line">    <span class="keyword">while</span>(q!=Ps-&gt;pBottom)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d \n"</span>,q-&gt;data);</span><br><span class="line">        q=q-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">(PSTACK Ps,<span class="keyword">int</span>* val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(isEmpty(Ps))</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    PNODE P=(PNODE)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(NODE));</span><br><span class="line">    P=Ps-&gt;pTop;</span><br><span class="line">    *val=P-&gt;data;</span><br><span class="line">    Ps-&gt;pTop=Ps-&gt;pTop-&gt;next;</span><br><span class="line">    <span class="built_in">free</span>(P);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;根据所学自己编写了一个栈的结构，正常使用应该是没问题的&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="基本数据结构" scheme="http://yoursite.com/tags/%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>数据结构里循环队列</title>
    <link href="http://yoursite.com/2019/08/28/algorithm03/"/>
    <id>http://yoursite.com/2019/08/28/algorithm03/</id>
    <published>2019-08-28T00:02:07.000Z</published>
    <updated>2019-08-28T00:14:26.764Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 10</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Queue</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span>* pBase;<span class="comment">//可以看作数组</span></span><br><span class="line">    <span class="keyword">int</span> front;</span><br><span class="line">    <span class="keyword">int</span> rear;</span><br><span class="line">&#125;QUEUE;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(QUEUE*)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">enQueue</span><span class="params">(QUEUE*,<span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">travel_queue</span><span class="params">(QUEUE*)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">full_queue</span><span class="params">(QUEUE*)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    QUEUE Q;</span><br><span class="line">    init(&amp;Q);</span><br><span class="line">    enQueue(&amp;Q,<span class="number">1</span>);</span><br><span class="line">    enQueue(&amp;Q,<span class="number">2</span>);</span><br><span class="line">    enQueue(&amp;Q,<span class="number">3</span>);</span><br><span class="line">    enQueue(&amp;Q,<span class="number">4</span>);</span><br><span class="line">    enQueue(&amp;Q,<span class="number">5</span>);</span><br><span class="line">    enQueue(&amp;Q,<span class="number">6</span>);</span><br><span class="line">    travel_queue(&amp;Q);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(QUEUE *pQ)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pQ-&gt;pBase=(<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span> )*MAX);<span class="comment">//开辟队列且定义长度，长度是MAX</span></span><br><span class="line">    pQ-&gt;front=<span class="number">0</span>;</span><br><span class="line">    pQ-&gt;rear=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">full_queue</span><span class="params">(QUEUE* pQ)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>((pQ-&gt;rear+<span class="number">1</span>)%MAX==pQ-&gt;front)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">enQueue</span><span class="params">(QUEUE* pQ,<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(full_queue(pQ))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        pQ-&gt;pBase[pQ-&gt;rear]=val;</span><br><span class="line">        pQ-&gt;rear=(pQ-&gt;rear+<span class="number">1</span>)%MAX;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">travel_queue</span><span class="params">(QUEUE* pQ)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">    i=pQ-&gt;front;</span><br><span class="line">    <span class="keyword">while</span>(i!=pQ-&gt;rear)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d \n"</span>,pQ-&gt;pBase[i]);</span><br><span class="line">        i=(i+<span class="number">1</span>)%MAX;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;li
      
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="基本数据结构" scheme="http://yoursite.com/tags/%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>递归函数的理解</title>
    <link href="http://yoursite.com/2019/08/28/algorithm01/"/>
    <id>http://yoursite.com/2019/08/28/algorithm01/</id>
    <published>2019-08-27T23:59:47.000Z</published>
    <updated>2019-08-28T00:14:28.437Z</updated>
    
    <content type="html"><![CDATA[<p>当一个函数的运行期间调用另一个函数的时候，在运行被调用的函数之前，系统会怎样操作呢：<br><strong>1</strong>．    将所有的实参，以及接下来会用到实参的语句的地址等信息传递给被调用的函数保存<br><strong>2</strong>．    为被调用的函数的局部变量（还有被调函数里的变量）分配存储空间<br><strong>3</strong>．    将控制转移到被调用函数的入口<br>而被调函数结束返回主调函数的之前，系统也是需要做以下的事情：<br><strong>1</strong>．    上一步分配的储存空间全部free掉，但是要保存被调函数的返回结果<br><strong>2</strong>．    依照开始保存的返回地址将控制转移给调用函数。<br>而在多次调用的时候，按照”后调用先返回”的原则。</p><a id="more"></a><p>也就是说，先把调用的函数拿过来，按照栈的形式进行存储然后再进行操作，例如下面代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">A</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">B</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">C</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">A</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    B();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">B</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    C();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">C</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"C"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    A();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>这是一个压栈的过程！</strong><br>在主函数调用A函数的时候，栈顶里存放的就是A函数里的数据，然后A函数又去调用B函数，B函数里的数据就被压进栈中，然后是C函数。当C函数执行完操作的时候，就释放掉其存储空间，然后是B，以此类推，当前运行的函数永远在栈顶。</p><p><strong>而递归就是函数自己去调用自己，流程是和上面的一样的，如果懂了上面的操作，那么递归是很容易去理解的。</strong><br><strong>而且在一个函数调用另一个函数的时候，该函数不会继续执行</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当一个函数的运行期间调用另一个函数的时候，在运行被调用的函数之前，系统会怎样操作呢：&lt;br&gt;&lt;strong&gt;1&lt;/strong&gt;．    将所有的实参，以及接下来会用到实参的语句的地址等信息传递给被调用的函数保存&lt;br&gt;&lt;strong&gt;2&lt;/strong&gt;．    为被调用的函数的局部变量（还有被调函数里的变量）分配存储空间&lt;br&gt;&lt;strong&gt;3&lt;/strong&gt;．    将控制转移到被调用函数的入口&lt;br&gt;而被调函数结束返回主调函数的之前，系统也是需要做以下的事情：&lt;br&gt;&lt;strong&gt;1&lt;/strong&gt;．    上一步分配的储存空间全部free掉，但是要保存被调函数的返回结果&lt;br&gt;&lt;strong&gt;2&lt;/strong&gt;．    依照开始保存的返回地址将控制转移给调用函数。&lt;br&gt;而在多次调用的时候，按照”后调用先返回”的原则。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="概念理解" scheme="http://yoursite.com/tags/%E6%A6%82%E5%BF%B5%E7%90%86%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>关于链表一些有趣的东西</title>
    <link href="http://yoursite.com/2019/08/28/algorithm00/"/>
    <id>http://yoursite.com/2019/08/28/algorithm00/</id>
    <published>2019-08-27T23:58:09.000Z</published>
    <updated>2019-08-31T13:45:45.317Z</updated>
    
    <content type="html"><![CDATA[<p>今天刷题的时候遇见了这个问题</p><blockquote><p>题目出自leetcode  21：合并两个有序链表</p></blockquote><blockquote><p>将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。<br>示例：<br>输入：1-&gt;2-&gt;4, 1-&gt;3-&gt;4<br>输出：1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4</p></blockquote><a id="more"></a><p>我想正好可以借这个机会复习一下数据结构的链表的结构，感觉忘的差不多了。。。首先我写出了一个简易的链表代码如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;NODE,*pNode;</span><br><span class="line"></span><br><span class="line"><span class="function">pNode <span class="title">CreatList</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">pNode Ps=(pNode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(NODE));</span><br><span class="line">Ps-&gt;data = <span class="number">-1</span>;</span><br><span class="line">Ps-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> Ps;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(pNode Ps,<span class="keyword">int</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">pNode pNew=(pNode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(NODE));</span><br><span class="line">    <span class="keyword">if</span>(pNew==<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"内存分配失败"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(Ps-&gt;next == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">  pNew-&gt;data = val;</span><br><span class="line">Ps-&gt;next = pNew;</span><br><span class="line">pNew-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">    pNode P = Ps;</span><br><span class="line"><span class="keyword">while</span>(P-&gt;next!=<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">P=P-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">pNew-&gt;data = val;</span><br><span class="line">P-&gt;next = pNew;</span><br><span class="line">pNew-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ListPrint</span><span class="params">(pNode Ps)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pNode P = Ps-&gt;next;</span><br><span class="line"><span class="keyword">while</span>(P!=<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>,P-&gt;data);</span><br><span class="line">P=P-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">pNode Pa;</span><br><span class="line">Pa = CreatList();</span><br><span class="line">add(Pa,<span class="number">1</span>);</span><br><span class="line">add(Pa,<span class="number">1</span>);</span><br><span class="line">add(Pa,<span class="number">1</span>);</span><br><span class="line">add(Pa,<span class="number">1</span>);</span><br><span class="line">add(Pa,<span class="number">1</span>);</span><br><span class="line">ListPrint(Pa);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不过在运行的时候我发现，不是我期望的那个结果，没有任何的显示，仔细的检查代码之后，我发现在add函数里的最后我加了一句free(P)，我尝试这将它删掉，程序正常的运行了，结果如下：<br><img src="https://upload-images.jianshu.io/upload_images/8889168-774e3bdca9a9e4b6.png" alt="image.png"><br>不过我觉得这是很有意思的事情，我查找了些关于free函数的资料：</p><blockquote><p>void free(void *FirstByte)： 该函数是将之前用malloc分配的空间还给程序或者是操作系统，也就是释放了这块内存，让它重新得到自由。</p></blockquote><p>好像并没有解决我的疑问，我又找到了这个</p><blockquote><p>free()释放的是指针指向的内存！注意！释放的是内存，不是指针！指针并没有被释放，指针仍然指向原来的存储空间。指针是一个变量，只有程序结束时才被销毁。释放了内存空间后，原来指向这块空间的指针还是存在！只不过现在指针指向的内容的垃圾，是未定义的，所以说是垃圾。因此，释放内存后把指针指向NULL，防止指针在后面不小心又被解引用了。</p></blockquote><p>也就是说我在free(P)这一句中，我把P指向的内存空间给释放了，所以程序无法继续的运行。。。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天刷题的时候遇见了这个问题&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;题目出自leetcode  21：合并两个有序链表&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。&lt;br&gt;示例：&lt;br&gt;输入：1-&amp;gt;2-&amp;gt;4, 1-&amp;gt;3-&amp;gt;4&lt;br&gt;输出：1-&amp;gt;1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;4&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="题目思路" scheme="http://yoursite.com/tags/%E9%A2%98%E7%9B%AE%E6%80%9D%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>二叉树的应用—平衡二叉树</title>
    <link href="http://yoursite.com/2019/08/27/datastructure05/"/>
    <id>http://yoursite.com/2019/08/27/datastructure05/</id>
    <published>2019-08-27T09:08:54.000Z</published>
    <updated>2019-08-31T13:43:55.229Z</updated>
    
    <content type="html"><![CDATA[<p>平衡二叉树：AVL，在<strong>任意结点</strong>的平衡因子的绝对值不超过一。<br>平衡因子：左子树高度减去右子树高度</p><a id="more"></a><ul><li><p>计算高度为h的最小平衡二叉树的节点数Nh<br><img src="https://upload-images.jianshu.io/upload_images/8889168-a2f4ab6baaf7b3c7.png" alt="递推规律"></p></li><li><p>平衡二叉树的判断<br>代码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Judge_AVL</span><span class="params">(BiTree bt,<span class="keyword">int</span> &amp;Balance,<span class="keyword">int</span> &amp;h)</span></span>&#123;</span><br><span class="line"><span class="comment">//使用引用类型是因为要修改值的原因</span></span><br><span class="line"><span class="keyword">int</span> bl=<span class="number">0</span>,br=<span class="number">0</span>,hl=<span class="number">0</span>,hr=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (bt == <span class="literal">NULL</span>)&#123;</span><br><span class="line">h = <span class="number">0</span>;</span><br><span class="line">Balance = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (bt-&gt;lchild == <span class="literal">NULL</span>&amp;&amp;bt-&gt;rchild == <span class="literal">NULL</span>)&#123;</span><br><span class="line">h = <span class="number">1</span>;</span><br><span class="line">Balance = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">Judge_AVL(bt-&gt;lchild,bl,hl);</span><br><span class="line">Judge_AVL(bt-&gt;rchild,br,hr);</span><br><span class="line"><span class="keyword">if</span> (hl &gt; hr)&#123;<span class="comment">//判断那个高，选哪个做整个树的高度</span></span><br><span class="line">h = hl+<span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">h = hr+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">abs</span>(hr-hl) &lt; <span class="number">2</span>&amp;&amp;bl = <span class="number">1</span>&amp;&amp;br = <span class="number">1</span>)&#123;</span><br><span class="line"><span class="comment">//根结点平衡，以及左右子树均平衡</span></span><br><span class="line">Balance = <span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span></span><br><span class="line">Balance = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>平衡二叉树的插入</strong><br>基本的思想是先插入，后调整，<strong>注意每次调整一定要是最小不平衡子树方可</strong></p></li><li><p><strong>图解很好理解，多看几遍就好*</strong></p></li></ul><p><strong>方法1  LL平衡旋转（右单旋转）</strong><br>在结点A的左孩子的左子树上插入新节点（左子树的左右结点都可以，不受影响）<br>让B结点上去，B的右结点更改为A，B真正的有节点改为A的左结点，因为B本身是A的左结点<br><img src="https://upload-images.jianshu.io/upload_images/8889168-3d9560e6035dc8a0.png" alt="右单旋转图解"><br><img src="https://upload-images.jianshu.io/upload_images/8889168-d25a929e09b05de5.png" alt="例"></p><p><strong>方法2 RR平衡旋转（左单旋转）</strong><br>在结点A的右孩子的右子树上插入新节点（右子树的左右结点都可以，不受影响）<br> 跟右旋一致，可以先变化为方法1的树，操作结束后再变换为原树。<br><img src="https://upload-images.jianshu.io/upload_images/8889168-36eeb14a17988f46.png" alt="左单旋转图解"><br><img src="https://upload-images.jianshu.io/upload_images/8889168-27fa3fe8ae90b6f8.png" alt="例"></p><p><strong>方法3 LR平衡旋转（先左后右双旋转）</strong><br>在结点A的左孩子的右子树插入了新的结点<br><img src="https://upload-images.jianshu.io/upload_images/8889168-8c888915fa3c0260.png" alt="先左后右双旋转"></p><p><img src="https://upload-images.jianshu.io/upload_images/8889168-0e9832ac9b04e25a.png" alt="例"></p><p><strong>方法4 RL平衡旋转（先右后左双旋转）</strong><br>在在结点A的右孩子的左子树插入了新的结点<br><img src="https://upload-images.jianshu.io/upload_images/8889168-66fa1bf9399fb8a8.png" alt="先右后左双旋转"><br><img src="https://upload-images.jianshu.io/upload_images/8889168-05454295073c1bce.png" alt="例"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;平衡二叉树：AVL，在&lt;strong&gt;任意结点&lt;/strong&gt;的平衡因子的绝对值不超过一。&lt;br&gt;平衡因子：左子树高度减去右子树高度&lt;/p&gt;
    
    </summary>
    
    
      <category term="874数据结构复习" scheme="http://yoursite.com/categories/874%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/"/>
    
    
      <category term="树" scheme="http://yoursite.com/tags/%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>树的应用—二叉排序树</title>
    <link href="http://yoursite.com/2019/08/26/datastructure04/"/>
    <id>http://yoursite.com/2019/08/26/datastructure04/</id>
    <published>2019-08-26T08:58:13.000Z</published>
    <updated>2019-08-31T13:43:17.532Z</updated>
    
    <content type="html"><![CDATA[<p>二叉排序树可以为空树，也可以为非空树，为非空树时有以下特点</p><ul><li>若左子树非空，则左子树上所有结点值均小于根结点的值</li><li>若右子树非空，则右子树上所有结点值均大于根结点的值</li><li>注意这里没有等于，也就是说二叉排序树中默认是没有相同值结点的*</li><li>左，右子树本身也是一颗二叉排序树<a id="more"></a>二叉排序树进行中序遍历后，序列即为一个递增的有序序列<br><img src="https://upload-images.jianshu.io/upload_images/8889168-169685d0bde0d130.png" alt="二叉排序树"></li></ul><p><strong>查找操作</strong><br>二叉树非空时，查找根结点，若相等则查找成功；<br>若不等，则小于根结点查左子树，大于查右子树<br>当查找到叶子结点还未找到，查找失败<br>代码实现，看懂就行<br><img src="https://upload-images.jianshu.io/upload_images/8889168-be94d83fd340aff3.png" alt="查找操作"><br><strong>插入操作</strong><br>若二叉排序树为空时，直接插入结点<br>若二叉排序树非空时，值小于根结点值时，插入左子树；大于插入右子树，等于不能插入。（使用递归来实现）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BST_Insert</span><span class="params">(BiTree &amp;T,KeyType k)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (T == <span class="literal">NULL</span>)&#123;</span><br><span class="line">T = (BiTree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BSTNode));</span><br><span class="line">T-&gt;key = k;</span><br><span class="line">T-&gt;lchild = T-&gt;rchild = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (k == T-&gt;key)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (k &lt; T-key)&#123;</span><br><span class="line"><span class="keyword">return</span> BSTNode(T-&gt;lchild,k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (k &gt; T-key)&#123;</span><br><span class="line"><span class="keyword">return</span> BSTNode(T-&gt;rchild,k);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>构造二叉排序树</strong><br>构造的过程是一个动态的过程，不断的调用插入函数来进行构造<br>读入一个元素并建立结点，若二叉树为空将其作为根结点；<br>若二叉排序树非空，小于插左子树，大于插右子树。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Create_BST</span><span class="params">(BiTree &amp;T,keyType str[],<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="comment">//str存放插入的元素，n为插入的个数</span></span><br><span class="line"> T = <span class="literal">NULL</span>;</span><br><span class="line"> <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"> <span class="keyword">while</span>(i&lt;n)&#123;</span><br><span class="line"> BST_Insert(T,str[i]);</span><br><span class="line"> i++;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>删除</strong></p><ul><li>若删除结点为叶子结点，则直接删除</li><li>若删除结点z有一颗子树y，那么选取这棵子树y代替该结点z的位置</li><li>若删除结点z有两颗子树，直接让z的中序遍历直接后继x，直接代替z的位置，然后执行删除x的操作，以此类推。最终会变成上面的两种情况。</li></ul><p><em>删除一个结点，然后再插入该结点，所得到的二叉排序树可能会不一样</em><br> <!--more--></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;二叉排序树可以为空树，也可以为非空树，为非空树时有以下特点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;若左子树非空，则左子树上所有结点值均小于根结点的值&lt;/li&gt;
&lt;li&gt;若右子树非空，则右子树上所有结点值均大于根结点的值&lt;/li&gt;
&lt;li&gt;注意这里没有等于，也就是说二叉排序树中默认是没有相同值结点的*&lt;/li&gt;
&lt;li&gt;左，右子树本身也是一颗二叉排序树
    
    </summary>
    
    
      <category term="874数据结构复习" scheme="http://yoursite.com/categories/874%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/"/>
    
    
      <category term="树" scheme="http://yoursite.com/tags/%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>树的应用—并查集</title>
    <link href="http://yoursite.com/2019/08/26/datastructure03/"/>
    <id>http://yoursite.com/2019/08/26/datastructure03/</id>
    <published>2019-08-26T08:58:07.000Z</published>
    <updated>2019-08-31T13:43:04.283Z</updated>
    
    <content type="html"><![CDATA[<p>并查集是一种简单的集合表示<br>使用树的<strong>双亲表示法</strong>作为并查集的存储结构，通常使用数组元素的下标代表元素名，用根结点的下标代表子集合名，根结点的双亲结点为负数</p><a id="more"></a><p>操作如下    </p><ul><li>将集合中的所有元素初始化为只有一个单元素的子集合<br><img src="https://upload-images.jianshu.io/upload_images/8889168-b586d179b512da0c.png" alt><br><img src="https://upload-images.jianshu.io/upload_images/8889168-a297a43198e898db.png" alt="初始化"><br>当集合变为一下情况时，存储结构变化如下<br><img src="https://upload-images.jianshu.io/upload_images/8889168-413cfa84762a44a7.png" alt></li></ul><p>0的树上共有四个元素，所以0位置的双亲值为4，因为是根结点，值为-4。<br>3的双亲结点为2，所以双亲值为2。<br><strong>剩余元素以此类推</strong></p><p>代码实现并查集的操作<br><strong>这里的S数组存储的是并查集里双亲结点的下标</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SIZE 100</span></span><br><span class="line"><span class="keyword">int</span>  UFset[SIZE]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Initial</span><span class="params">(<span class="keyword">int</span> S[])</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; ++i)</span><br><span class="line">&#123;</span><br><span class="line">S[i] = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> S[],<span class="keyword">int</span> x)</span></span>&#123;<span class="comment">//要找出的是x元素所在树的根结点，因为根结点双亲值为负</span></span><br><span class="line"><span class="keyword">while</span>(S[x]&gt;=<span class="number">0</span>)</span><br><span class="line">x = S[x];</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Union</span><span class="params">(<span class="keyword">int</span> S[],<span class="keyword">int</span> Root1,<span class="keyword">int</span> Root2)</span></span>&#123;<span class="comment">//合并就是把Roo2子集变为Root1的子集</span></span><br><span class="line">S[Root2] = Root1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>合并操作图解<br><img src="https://upload-images.jianshu.io/upload_images/8889168-db00db20e38cd18d.png" alt><br><img src="https://upload-images.jianshu.io/upload_images/8889168-ba93aa57b87e548b.png" alt="Root1为0，Root2为1"><br><img src="https://upload-images.jianshu.io/upload_images/8889168-f764bfe0622a8d0d.png" alt="合并操作之后S数组的变化"></p><!--more-->]]></content>
    
    <summary type="html">
    
      &lt;p&gt;并查集是一种简单的集合表示&lt;br&gt;使用树的&lt;strong&gt;双亲表示法&lt;/strong&gt;作为并查集的存储结构，通常使用数组元素的下标代表元素名，用根结点的下标代表子集合名，根结点的双亲结点为负数&lt;/p&gt;
    
    </summary>
    
    
      <category term="874数据结构复习" scheme="http://yoursite.com/categories/874%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/"/>
    
    
      <category term="树" scheme="http://yoursite.com/tags/%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>树和森林的遍历</title>
    <link href="http://yoursite.com/2019/08/26/datastructure02/"/>
    <id>http://yoursite.com/2019/08/26/datastructure02/</id>
    <published>2019-08-26T08:58:01.000Z</published>
    <updated>2019-08-31T13:42:32.030Z</updated>
    
    <content type="html"><![CDATA[<p><strong>树的遍历</strong></p><ul><li>先根遍历<br>若树非空，则先访问根结点，再按从左到右的顺序遍历根结点的每棵子树<a id="more"></a><img src="https://upload-images.jianshu.io/upload_images/8889168-d71244e6eb65d6ea.png" alt="树"><br>先根遍历：RADEBCFGHK<br>将其转化为二叉树之后，先序遍历：RADEBCFGHK</li><li><em>树的先根遍历序列与这棵树对应二叉树的先序遍历序列相同*</em></li><li>后根遍历<br>若树非空，则先按从左到右的顺序遍历根结点的每颗子树，再访问根结点<br><img src="https://upload-images.jianshu.io/upload_images/8889168-33a28fdbea486a00.png" alt="树"><br>后根遍历序列：DEABGHKFCR<br>将其转化为二叉树之后，中序遍历：DEABGHKFCR</li><li><em>树的后根遍历序列与这棵树对应二叉树的中序遍历序列相同*</em></li><li>这里没有中根遍历是因为树并不是像二叉树一样分为左右子树，无法中根遍历*</li><li>层次遍历<br>按照标号的顺序，由上至下，由左至右的顺序，一层一层遍历</li></ul><p><strong>森林的遍历</strong></p><ul><li>先序遍历</li><li><em>等同于将森林转化为二叉树之后的先序遍历*</em></li><li>中序遍历</li><li><em>等同于将森林转化为二叉树之后的中序遍历*</em><br>内容过于简单，不再多余赘述了  <!--more--></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;树的遍历&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;先根遍历&lt;br&gt;若树非空，则先访问根结点，再按从左到右的顺序遍历根结点的每棵子树
    
    </summary>
    
    
      <category term="874数据结构复习" scheme="http://yoursite.com/categories/874%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/"/>
    
    
      <category term="树" scheme="http://yoursite.com/tags/%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>森林，树，二叉树转化</title>
    <link href="http://yoursite.com/2019/08/26/datastructure01/"/>
    <id>http://yoursite.com/2019/08/26/datastructure01/</id>
    <published>2019-08-26T08:57:55.000Z</published>
    <updated>2019-08-31T13:42:19.596Z</updated>
    
    <content type="html"><![CDATA[<p>树与二叉树之间的转换依靠的原则是左孩子，右兄弟的原则<br>每个结点左指针指向第一个孩子结点，右指针指向树中的相邻结点</p><a id="more"></a><p><img src="https://upload-images.jianshu.io/upload_images/8889168-6d891bdd1263935c.png" alt="树"><br><img src="https://upload-images.jianshu.io/upload_images/8889168-7c3f35a82955ca6a.png" alt="转化为二叉树"></p><p>森林与二叉树之间的转换也是同样的道理，只不过根结点的相邻结点即为相邻树的根结点</p><p><img src="https://upload-images.jianshu.io/upload_images/8889168-fbb604d4acf06b26.png" alt="森林"><br><img src="https://upload-images.jianshu.io/upload_images/8889168-58cdc4564e602f1c.png" alt="转化为二叉树"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;树与二叉树之间的转换依靠的原则是左孩子，右兄弟的原则&lt;br&gt;每个结点左指针指向第一个孩子结点，右指针指向树中的相邻结点&lt;/p&gt;
    
    </summary>
    
    
      <category term="874数据结构复习" scheme="http://yoursite.com/categories/874%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/"/>
    
    
      <category term="树" scheme="http://yoursite.com/tags/%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>中序遍历建立线索二叉树</title>
    <link href="http://yoursite.com/2019/08/24/datastructure00/"/>
    <id>http://yoursite.com/2019/08/24/datastructure00/</id>
    <published>2019-08-24T12:28:32.000Z</published>
    <updated>2019-08-31T14:52:58.531Z</updated>
    
    <content type="html"><![CDATA[<p>为什么使用中序遍历来建立线索二叉树？</p><p>因为中序遍历方便寻找前驱节点和后继节点，而先序遍历不方便找后继节点，后序遍历不方便找前驱节点和后继节点。</p><a id="more"></a><p>中序遍历线索二叉树的特点<br><img src="https://upload-images.jianshu.io/upload_images/8889168-a0a90c51436b4892.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="中序遍历线索二叉树"><br>这里需要理解一下指针不为线索时的情况（中序遍历）</p><p>建立代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InThread</span><span class="params">(ThreadTree &amp;p,ThreadTree &amp;pre)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(p!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">InThread(p-&gt;lchild,pre);</span><br><span class="line"><span class="keyword">if</span> (p-&gt;lchild==<span class="literal">NULL</span>)&#123;</span><br><span class="line">p-&gt;lchild = pre;</span><br><span class="line">p-&gt;tap=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (pre!=<span class="literal">NULL</span> &amp;&amp; p-&gt;rchild==<span class="literal">NULL</span>)&#123;</span><br><span class="line">pre-&gt;rchild = p;</span><br><span class="line">pre-&gt;rtag = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">pre = p;</span><br><span class="line">InThread(p-&gt;rchild,pre);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>理解不来，背下即可，与中序遍历相似。只不过在递归中加入了线索化的过程。</p><!--more-->]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为什么使用中序遍历来建立线索二叉树？&lt;/p&gt;
&lt;p&gt;因为中序遍历方便寻找前驱节点和后继节点，而先序遍历不方便找后继节点，后序遍历不方便找前驱节点和后继节点。&lt;/p&gt;
    
    </summary>
    
    
      <category term="874数据结构复习" scheme="http://yoursite.com/categories/874%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A4%8D%E4%B9%A0/"/>
    
    
      <category term="树" scheme="http://yoursite.com/tags/%E6%A0%91/"/>
    
  </entry>
  
</feed>
